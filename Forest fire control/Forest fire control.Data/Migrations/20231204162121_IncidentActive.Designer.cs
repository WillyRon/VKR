// <auto-generated />
using System;
using Forest_fire_control.Data.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Forest_fire_control.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231204162121_IncidentActive")]
    partial class IncidentActive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Forest_fire_control.Data.Entity.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SysName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ObservationSiteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ObservationSiteId");

                    b.HasIndex("UserId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.Incedent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ObservationSiteId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("VideoArchiveId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ObservationSiteId");

                    b.ToTable("Incedent");
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.ObservationSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool>("IsActiveIncident")
                        .HasColumnType("boolean");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("Longitude", "Latitude")
                        .IsUnique();

                    b.ToTable("ObservationSite");
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.VideoArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("IncedentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ObservationSiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IncedentId")
                        .IsUnique();

                    b.HasIndex("ObservationSiteId");

                    b.ToTable("VideoArchive");
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.Application", b =>
                {
                    b.HasOne("Forest_fire_control.Data.Models.ObservationSite", "ObservationSite")
                        .WithMany()
                        .HasForeignKey("ObservationSiteId");

                    b.HasOne("Forest_fire_control.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.Incedent", b =>
                {
                    b.HasOne("Forest_fire_control.Data.Models.ObservationSite", "ObservationSite")
                        .WithMany()
                        .HasForeignKey("ObservationSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.ObservationSite", b =>
                {
                    b.HasOne("Forest_fire_control.Data.Entity.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.User", b =>
                {
                    b.HasOne("Forest_fire_control.Data.Entity.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forest_fire_control.Data.Models.VideoArchive", b =>
                {
                    b.HasOne("Forest_fire_control.Data.Models.Incedent", "Incedent")
                        .WithOne("VideoArchive")
                        .HasForeignKey("Forest_fire_control.Data.Models.VideoArchive", "IncedentId");

                    b.HasOne("Forest_fire_control.Data.Models.ObservationSite", "ObservationSite")
                        .WithMany()
                        .HasForeignKey("ObservationSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
