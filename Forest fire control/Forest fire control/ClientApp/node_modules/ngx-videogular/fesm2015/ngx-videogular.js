import { Injectable, EventEmitter, Component, ViewEncapsulation, ElementRef, Input, HostBinding, NgModule, ɵɵdefineInjectable, HostListener, ViewChild, Pipe, Output, Directive, ChangeDetectorRef, ContentChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject, fromEvent, Observable, combineLatest, timer } from 'rxjs';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/states/vg-states.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgStates {
}
VgStates.VG_ENDED = 'ended';
VgStates.VG_PAUSED = 'paused';
VgStates.VG_PLAYING = 'playing';
VgStates.VG_LOADING = 'waiting';
VgStates.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    VgStates.VG_ENDED;
    /** @type {?} */
    VgStates.VG_PAUSED;
    /** @type {?} */
    VgStates.VG_PLAYING;
    /** @type {?} */
    VgStates.VG_LOADING;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/vg-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgAPI {
    constructor() {
        // tslint:disable-next-line:ban-types
        this.medias = {}; // TODO: refactor to Set<IPlayable>
        this.playerReadyEvent = new EventEmitter(true);
        this.isPlayerReady = false;
    }
    /**
     * @param {?} fsAPI
     * @return {?}
     */
    onPlayerReady(fsAPI) {
        this.fsAPI = fsAPI;
        this.isPlayerReady = true;
        this.playerReadyEvent.emit(this);
    }
    /**
     * @return {?}
     */
    getDefaultMedia() {
        for (const item in this.medias) {
            if (this.medias[item]) {
                return this.medias[item];
            }
        }
    }
    /**
     * @return {?}
     */
    getMasterMedia() {
        /** @type {?} */
        let master;
        for (const id in this.medias) {
            if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {
                master = this.medias[id];
                break;
            }
        }
        return master || this.getDefaultMedia();
    }
    /**
     * @return {?}
     */
    isMasterDefined() {
        /** @type {?} */
        let result = false;
        for (const id in this.medias) {
            if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {
                result = true;
                break;
            }
        }
        return result;
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    getMediaById(id = null) {
        /** @type {?} */
        let media = this.medias[id];
        if (!id || id === '*') {
            media = this;
        }
        return media;
    }
    /**
     * @return {?}
     */
    play() {
        for (const id in this.medias) {
            if (this.medias[id]) {
                this.medias[id].play();
            }
        }
    }
    /**
     * @return {?}
     */
    pause() {
        for (const id in this.medias) {
            if (this.medias[id]) {
                this.medias[id].pause();
            }
        }
    }
    /**
     * @return {?}
     */
    get duration() {
        return this.$$getAllProperties('duration');
    }
    /**
     * @param {?} seconds
     * @return {?}
     */
    set currentTime(seconds) {
        this.$$setAllProperties('currentTime', seconds);
    }
    /**
     * @return {?}
     */
    get currentTime() {
        return this.$$getAllProperties('currentTime');
    }
    /**
     * @param {?} state
     * @return {?}
     */
    set state(state) {
        this.$$setAllProperties('state', state);
    }
    /**
     * @return {?}
     */
    get state() {
        return this.$$getAllProperties('state');
    }
    /**
     * @param {?} volume
     * @return {?}
     */
    set volume(volume) {
        this.$$setAllProperties('volume', volume);
    }
    /**
     * @return {?}
     */
    get volume() {
        return this.$$getAllProperties('volume');
    }
    /**
     * @param {?} rate
     * @return {?}
     */
    set playbackRate(rate) {
        this.$$setAllProperties('playbackRate', rate);
    }
    /**
     * @return {?}
     */
    get playbackRate() {
        return this.$$getAllProperties('playbackRate');
    }
    /**
     * @return {?}
     */
    get canPlay() {
        return this.$$getAllProperties('canPlay');
    }
    /**
     * @return {?}
     */
    get canPlayThrough() {
        return this.$$getAllProperties('canPlayThrough');
    }
    /**
     * @return {?}
     */
    get isMetadataLoaded() {
        return this.$$getAllProperties('isMetadataLoaded');
    }
    /**
     * @return {?}
     */
    get isWaiting() {
        return this.$$getAllProperties('isWaiting');
    }
    /**
     * @return {?}
     */
    get isCompleted() {
        return this.$$getAllProperties('isCompleted');
    }
    /**
     * @return {?}
     */
    get isLive() {
        return this.$$getAllProperties('isLive');
    }
    /**
     * @return {?}
     */
    get isMaster() {
        return this.$$getAllProperties('isMaster');
    }
    /**
     * @return {?}
     */
    get time() {
        return this.$$getAllProperties('time');
    }
    /**
     * @return {?}
     */
    get buffer() {
        return this.$$getAllProperties('buffer');
    }
    /**
     * @return {?}
     */
    get buffered() {
        return this.$$getAllProperties('buffered');
    }
    /**
     * @return {?}
     */
    get subscriptions() {
        return this.$$getAllProperties('subscriptions');
    }
    /**
     * @return {?}
     */
    get textTracks() {
        return this.$$getAllProperties('textTracks');
    }
    /**
     * @param {?} value
     * @param {?=} byPercent
     * @return {?}
     */
    seekTime(value, byPercent = false) {
        for (const id in this.medias) {
            if (this.medias[id]) {
                this.$$seek(this.medias[id], value, byPercent);
            }
        }
    }
    /**
     * @param {?} media
     * @param {?} value
     * @param {?=} byPercent
     * @return {?}
     */
    $$seek(media, value, byPercent = false) {
        /** @type {?} */
        let second;
        /** @type {?} */
        let duration = media.duration;
        if (byPercent) {
            if (this.isMasterDefined()) {
                duration = this.getMasterMedia().duration;
            }
            second = value * duration / 100;
        }
        else {
            second = value;
        }
        media.currentTime = second;
    }
    /**
     * @param {?} type
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    addTextTrack(type, label, language) {
        for (const id in this.medias) {
            if (this.medias[id]) {
                this.$$addTextTrack(this.medias[id], type, label, language);
            }
        }
    }
    /**
     * @param {?} media
     * @param {?} type
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    $$addTextTrack(media, type, label, language) {
        media.addTextTrack(type, label, language);
    }
    /**
     * @param {?} property
     * @return {?}
     */
    $$getAllProperties(property) {
        /** @type {?} */
        const medias = {};
        /** @type {?} */
        let result;
        for (const id in this.medias) {
            if (this.medias[id]) {
                medias[id] = this.medias[id];
            }
        }
        /** @type {?} */
        const nMedias = Object.keys(medias).length;
        switch (nMedias) {
            case 0:
                // Return default values until vgMedia is initialized
                switch (property) {
                    case 'state':
                        result = VgStates.VG_PAUSED;
                        break;
                    case 'playbackRate':
                    case 'volume':
                        result = 1;
                        break;
                    case 'time':
                        result = { current: 0, total: 0, left: 0 };
                        break;
                }
                break;
            case 1:
                // If there's only one media element then return the plain value
                /** @type {?} */
                const firstMediaId = Object.keys(medias)[0];
                result = medias[firstMediaId][property];
                break;
            default:
                // TODO: return 'master' value
                /** @type {?} */
                const master = this.getMasterMedia();
                result = medias[master.id][property];
        }
        return result;
    }
    /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    $$setAllProperties(property, value) {
        for (const id in this.medias) {
            if (this.medias[id]) {
                this.medias[id][property] = value;
            }
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    registerElement(elem) {
        this.videogularElement = elem;
    }
    /**
     * @param {?} media
     * @return {?}
     */
    registerMedia(media) {
        this.medias[media.id] = media;
    }
    /**
     * @param {?} media
     * @return {?}
     */
    unregisterMedia(media) {
        delete this.medias[media.id];
    }
}
VgAPI.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VgAPI.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    VgAPI.prototype.medias;
    /** @type {?} */
    VgAPI.prototype.videogularElement;
    /** @type {?} */
    VgAPI.prototype.playerReadyEvent;
    /** @type {?} */
    VgAPI.prototype.isPlayerReady;
    /** @type {?} */
    VgAPI.prototype.fsAPI;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/buffering/vg-buffering.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgBuffering {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.checkInterval = 50;
        this.currentPlayPos = 0;
        this.lastPlayPos = 0;
        this.subscriptions = [];
        this.isBuffering = false;
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        this.subscriptions.push(this.target.subscriptions.bufferDetected.subscribe((/**
         * @param {?} isBuffering
         * @return {?}
         */
        isBuffering => this.onUpdateBuffer(isBuffering))));
    }
    /**
     * @param {?} isBuffering
     * @return {?}
     */
    onUpdateBuffer(isBuffering) {
        this.isBuffering = isBuffering;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgBuffering.decorators = [
    { type: Component, args: [{
                selector: 'vg-buffering',
                encapsulation: ViewEncapsulation.None,
                template: `<div class="vg-buffering">
            <div class="bufferingContainer">
                <div class="loadingSpinner"></div>
            </div>
        </div>`,
                styles: [`
        vg-buffering {
            display: none;
            z-index: 201;
        }
        vg-buffering.is-buffering {
            display: block;
        }

        .vg-buffering {
            position: absolute;
            display: block;
            width: 100%;
            height: 100%;
        }
        .vg-buffering .bufferingContainer {
            width: 100%;
            position: absolute;
            cursor: pointer;
            top: 50%;
            margin-top: -50px;
            zoom: 1;
            filter: alpha(opacity=60);
            opacity: 0.6;
        }
        /* Loading Spinner
        * http://www.alessioatzeni.com/blog/css3-loading-animation-loop/
        */
        .vg-buffering .loadingSpinner {
            background-color: rgba(0, 0, 0, 0);
            border: 5px solid rgba(255, 255, 255, 1);
            opacity: .9;
            border-top: 5px solid rgba(0, 0, 0, 0);
            border-left: 5px solid rgba(0, 0, 0, 0);
            border-radius: 50px;
            box-shadow: 0 0 35px #FFFFFF;
            width: 50px;
            height: 50px;
            margin: 0 auto;
            -moz-animation: spin .5s infinite linear;
            -webkit-animation: spin .5s infinite linear;
        }
        .vg-buffering .loadingSpinner .stop {
            -webkit-animation-play-state: paused;
            -moz-animation-play-state: paused;
        }
        @-moz-keyframes spin {
            0% {
                -moz-transform: rotate(0deg);
            }
            100% {
                -moz-transform: rotate(360deg);
            }
        }
        @-moz-keyframes spinoff {
            0% {
                -moz-transform: rotate(0deg);
            }
            100% {
                -moz-transform: rotate(-360deg);
            }
        }
        @-webkit-keyframes spin {
            0% {
                -webkit-transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
            }
        }
        @-webkit-keyframes spinoff {
            0% {
                -webkit-transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(-360deg);
            }
        }
    `]
            }] }
];
/** @nocollapse */
VgBuffering.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgBuffering.propDecorators = {
    vgFor: [{ type: Input }],
    isBuffering: [{ type: HostBinding, args: ['class.is-buffering',] }]
};
if (false) {
    /** @type {?} */
    VgBuffering.prototype.vgFor;
    /** @type {?} */
    VgBuffering.prototype.elem;
    /** @type {?} */
    VgBuffering.prototype.target;
    /** @type {?} */
    VgBuffering.prototype.checkInterval;
    /** @type {?} */
    VgBuffering.prototype.currentPlayPos;
    /** @type {?} */
    VgBuffering.prototype.lastPlayPos;
    /** @type {?} */
    VgBuffering.prototype.subscriptions;
    /** @type {?} */
    VgBuffering.prototype.isBuffering;
    /** @type {?} */
    VgBuffering.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/buffering/vg-buffering.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgBufferingModule {
}
VgBufferingModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    VgBuffering
                ],
                exports: [
                    VgBuffering
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/vg-controls-hidden.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgControlsHidden {
    constructor() {
        this.isHiddenSubject = new Subject();
        this.isHidden = this.isHiddenSubject.asObservable();
    }
    /**
     * @param {?} hidden
     * @return {?}
     */
    state(hidden) {
        this.isHiddenSubject.next(hidden);
    }
}
VgControlsHidden.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VgControlsHidden.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    VgControlsHidden.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    VgControlsHidden.prototype.isHiddenSubject;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-controls.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgControls {
    /**
     * @param {?} API
     * @param {?} ref
     * @param {?} hidden
     */
    constructor(API, ref, hidden) {
        this.API = API;
        this.ref = ref;
        this.hidden = hidden;
        this.isAdsPlaying = 'initial';
        this.hideControls = false;
        this.vgAutohide = false;
        this.vgAutohideTime = 3;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.mouseMove$ = fromEvent(this.API.videogularElement, 'mousemove');
        this.subscriptions.push(this.mouseMove$.subscribe(this.show.bind(this)));
        this.touchStart$ = fromEvent(this.API.videogularElement, 'touchstart');
        this.subscriptions.push(this.touchStart$.subscribe(this.show.bind(this)));
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        this.subscriptions.push(this.target.subscriptions.play.subscribe(this.onPlay.bind(this)));
        this.subscriptions.push(this.target.subscriptions.pause.subscribe(this.onPause.bind(this)));
        this.subscriptions.push(this.target.subscriptions.startAds.subscribe(this.onStartAds.bind(this)));
        this.subscriptions.push(this.target.subscriptions.endAds.subscribe(this.onEndAds.bind(this)));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.vgAutohide) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    /**
     * @return {?}
     */
    onPlay() {
        if (this.vgAutohide) {
            this.hide();
        }
    }
    /**
     * @return {?}
     */
    onPause() {
        clearTimeout(this.timer);
        this.hideControls = false;
        this.hidden.state(false);
    }
    /**
     * @return {?}
     */
    onStartAds() {
        this.isAdsPlaying = 'none';
    }
    /**
     * @return {?}
     */
    onEndAds() {
        this.isAdsPlaying = 'initial';
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.vgAutohide) {
            clearTimeout(this.timer);
            this.hideAsync();
        }
    }
    /**
     * @return {?}
     */
    show() {
        clearTimeout(this.timer);
        this.hideControls = false;
        this.hidden.state(false);
        if (this.vgAutohide) {
            this.hideAsync();
        }
    }
    /**
     * @private
     * @return {?}
     */
    hideAsync() {
        if (this.API.state === VgStates.VG_PLAYING) {
            this.timer = setTimeout((/**
             * @return {?}
             */
            () => {
                this.hideControls = true;
                this.hidden.state(true);
            }), this.vgAutohideTime * 1000);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgControls.decorators = [
    { type: Component, args: [{
                selector: 'vg-controls',
                encapsulation: ViewEncapsulation.None,
                template: `<ng-content></ng-content>`,
                styles: [`
        vg-controls {
            position: absolute;
            display: flex;
            width: 100%;
            height: 50px;
            z-index: 300;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            -webkit-transition: bottom 1s;
            -khtml-transition: bottom 1s;
            -moz-transition: bottom 1s;
            -ms-transition: bottom 1s;
            transition: bottom 1s;
        }
        vg-controls.hide {
            bottom: -50px;
        }
    `]
            }] }
];
/** @nocollapse */
VgControls.ctorParameters = () => [
    { type: VgAPI },
    { type: ElementRef },
    { type: VgControlsHidden }
];
VgControls.propDecorators = {
    isAdsPlaying: [{ type: HostBinding, args: ['style.pointer-events',] }],
    hideControls: [{ type: HostBinding, args: ['class.hide',] }],
    vgFor: [{ type: Input }],
    vgAutohide: [{ type: Input }],
    vgAutohideTime: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgControls.prototype.elem;
    /** @type {?} */
    VgControls.prototype.target;
    /** @type {?} */
    VgControls.prototype.isAdsPlaying;
    /** @type {?} */
    VgControls.prototype.hideControls;
    /** @type {?} */
    VgControls.prototype.vgFor;
    /** @type {?} */
    VgControls.prototype.vgAutohide;
    /** @type {?} */
    VgControls.prototype.vgAutohideTime;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.timer;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.hideTimer;
    /** @type {?} */
    VgControls.prototype.mouseMove$;
    /** @type {?} */
    VgControls.prototype.touchStart$;
    /** @type {?} */
    VgControls.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.API;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.hidden;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/vg-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgUtils {
    /**
     * Inspired by Paul Irish
     * https://gist.github.com/paulirish/211209
     * @return {?} z-Index
     */
    static getZIndex() {
        /** @type {?} */
        let zIndex = 1;
        /** @type {?} */
        let elementZIndex;
        /** @type {?} */
        const tags = document.getElementsByTagName('*');
        for (let i = 0, l = tags.length; i < l; i++) {
            elementZIndex = parseInt(window.getComputedStyle(tags[i])['z-index'], 10);
            if (elementZIndex > zIndex) {
                zIndex = elementZIndex + 1;
            }
        }
        return zIndex;
    }
    // Very simple mobile detection, not 100% reliable
    /**
     * @return {?}
     */
    static isMobileDevice() {
        return (typeof window.orientation !== 'undefined') || (navigator.userAgent.indexOf('IEMobile') !== -1);
    }
    /**
     * @return {?}
     */
    static isiOSDevice() {
        return (navigator.userAgent.match(/ip(hone|ad|od)/i) && !navigator.userAgent.match(/(iemobile)[\/\s]?([\w\.]*)/i));
    }
    /**
     * @return {?}
     */
    static isCordova() {
        return document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1;
    }
}
VgUtils.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ VgUtils.ngInjectableDef = ɵɵdefineInjectable({ factory: function VgUtils_Factory() { return new VgUtils(); }, token: VgUtils, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/vg-fullscreen-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgFullscreenAPI {
    constructor() {
        this.nativeFullscreen = true;
        this.isFullscreen = false;
        this.onChangeFullscreen = new EventEmitter();
    }
    /**
     * @param {?} elem
     * @param {?} medias
     * @return {?}
     */
    init(elem, medias) {
        this.videogularElement = elem;
        this.medias = medias;
        /** @type {?} */
        const APIs = {
            w3: {
                enabled: 'fullscreenEnabled',
                element: 'fullscreenElement',
                request: 'requestFullscreen',
                exit: 'exitFullscreen',
                onchange: 'fullscreenchange',
                onerror: 'fullscreenerror'
            },
            newWebkit: {
                enabled: 'webkitFullscreenEnabled',
                element: 'webkitFullscreenElement',
                request: 'webkitRequestFullscreen',
                exit: 'webkitExitFullscreen',
                onchange: 'webkitfullscreenchange',
                onerror: 'webkitfullscreenerror'
            },
            oldWebkit: {
                enabled: 'webkitIsFullScreen',
                element: 'webkitCurrentFullScreenElement',
                request: 'webkitRequestFullScreen',
                exit: 'webkitCancelFullScreen',
                onchange: 'webkitfullscreenchange',
                onerror: 'webkitfullscreenerror'
            },
            moz: {
                enabled: 'mozFullScreen',
                element: 'mozFullScreenElement',
                request: 'mozRequestFullScreen',
                exit: 'mozCancelFullScreen',
                onchange: 'mozfullscreenchange',
                onerror: 'mozfullscreenerror'
            },
            ios: {
                enabled: 'webkitFullscreenEnabled',
                element: 'webkitFullscreenElement',
                request: 'webkitEnterFullscreen',
                exit: 'webkitExitFullscreen',
                onchange: 'webkitendfullscreen',
                // Hack for iOS: webkitfullscreenchange it's not firing
                onerror: 'webkitfullscreenerror'
            },
            ms: {
                enabled: 'msFullscreenEnabled',
                element: 'msFullscreenElement',
                request: 'msRequestFullscreen',
                exit: 'msExitFullscreen',
                onchange: 'MSFullscreenChange',
                onerror: 'MSFullscreenError'
            }
        };
        for (const browser in APIs) {
            if (APIs[browser].enabled in document) {
                this.polyfill = APIs[browser];
                break;
            }
        }
        if (VgUtils.isiOSDevice()) {
            this.polyfill = APIs.ios;
        }
        this.isAvailable = (this.polyfill != null);
        if (this.polyfill == null) {
            return;
        }
        /** @type {?} */
        let fsElemDispatcher;
        switch (this.polyfill.onchange) {
            // Mozilla dispatches the fullscreen change event from document, not the element
            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=724816#c3
            case 'mozfullscreenchange':
                fsElemDispatcher = document;
                break;
            // iOS dispatches the fullscreen change event from video element
            case 'webkitendfullscreen':
                fsElemDispatcher = this.medias.toArray()[0].elem;
                break;
            // HTML5 implementation dispatches the fullscreen change event from the element
            default:
                fsElemDispatcher = elem;
        }
        this.fsChangeSubscription = fromEvent(fsElemDispatcher, this.polyfill.onchange).subscribe((/**
         * @return {?}
         */
        () => {
            this.onFullscreenChange();
        }));
    }
    /**
     * @return {?}
     */
    onFullscreenChange() {
        this.isFullscreen = !!document[this.polyfill.element];
        this.onChangeFullscreen.emit(this.isFullscreen);
    }
    /**
     * @param {?=} element
     * @return {?}
     */
    toggleFullscreen(element = null) {
        if (this.isFullscreen) {
            this.exit();
        }
        else {
            this.request(element);
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    request(elem) {
        if (!elem) {
            elem = this.videogularElement;
        }
        this.isFullscreen = true;
        this.onChangeFullscreen.emit(true);
        // Perform native full screen support
        if (this.isAvailable && this.nativeFullscreen) {
            // Fullscreen for mobile devices
            if (VgUtils.isMobileDevice()) {
                // We should make fullscreen the video object if it doesn't have native fullscreen support
                // Fallback! We can't set vg-player on fullscreen, only video/audio objects
                if ((!this.polyfill.enabled && elem === this.videogularElement) || VgUtils.isiOSDevice()) {
                    elem = this.medias.toArray()[0].elem;
                }
                this.enterElementInFullScreen(elem);
            }
            else {
                this.enterElementInFullScreen(this.videogularElement);
            }
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    enterElementInFullScreen(elem) {
        elem[this.polyfill.request]();
    }
    /**
     * @return {?}
     */
    exit() {
        this.isFullscreen = false;
        this.onChangeFullscreen.emit(false);
        // Exit from native fullscreen
        if (this.isAvailable && this.nativeFullscreen) {
            document[this.polyfill.exit]();
        }
    }
}
VgFullscreenAPI.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VgFullscreenAPI.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    VgFullscreenAPI.prototype.polyfill;
    /** @type {?} */
    VgFullscreenAPI.prototype.onchange;
    /** @type {?} */
    VgFullscreenAPI.prototype.onerror;
    /** @type {?} */
    VgFullscreenAPI.prototype.nativeFullscreen;
    /** @type {?} */
    VgFullscreenAPI.prototype.isFullscreen;
    /** @type {?} */
    VgFullscreenAPI.prototype.isAvailable;
    /** @type {?} */
    VgFullscreenAPI.prototype.videogularElement;
    /** @type {?} */
    VgFullscreenAPI.prototype.medias;
    /** @type {?} */
    VgFullscreenAPI.prototype.fsChangeSubscription;
    /** @type {?} */
    VgFullscreenAPI.prototype.onChangeFullscreen;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-fullscreen/vg-fullscreen.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
// tslint:disable:ban-types
class VgFullscreen {
    /**
     * @param {?} ref
     * @param {?} API
     * @param {?} fsAPI
     */
    constructor(ref, API, fsAPI) {
        this.API = API;
        this.fsAPI = fsAPI;
        this.isFullscreen = false;
        this.subscriptions = [];
        this.ariaValue = 'normal mode';
        this.elem = ref.nativeElement;
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    /**
     * @param {?} fsState
     * @return {?}
     */
    onChangeFullscreen(fsState) {
        this.ariaValue = fsState ? 'fullscren mode' : 'normal mode';
        this.isFullscreen = fsState;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.changeFullscreenState();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        // On press Enter (13) or Space (32)
        if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.changeFullscreenState();
        }
    }
    /**
     * @return {?}
     */
    changeFullscreenState() {
        /** @type {?} */
        let element = this.target;
        if (this.target instanceof VgAPI) {
            element = null;
        }
        this.fsAPI.toggleFullscreen(element);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgFullscreen.decorators = [
    { type: Component, args: [{
                selector: 'vg-fullscreen',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="icon"
             [class.vg-icon-fullscreen]="!isFullscreen"
             [class.vg-icon-fullscreen_exit]="isFullscreen"
             tabindex="0"
             role="button"
             aria-label="fullscreen button"
             [attr.aria-valuetext]="ariaValue">
        </div>`,
                styles: [`
        vg-fullscreen {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            height: 50px;
            width: 50px;
            cursor: pointer;
            color: white;
            line-height: 50px;
        }

        vg-fullscreen .icon {
            pointer-events: none;
        }
    `]
            }] }
];
/** @nocollapse */
VgFullscreen.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI },
    { type: VgFullscreenAPI }
];
VgFullscreen.propDecorators = {
    onClick: [{ type: HostListener, args: ['click',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    VgFullscreen.prototype.elem;
    /** @type {?} */
    VgFullscreen.prototype.vgFor;
    /** @type {?} */
    VgFullscreen.prototype.target;
    /** @type {?} */
    VgFullscreen.prototype.isFullscreen;
    /** @type {?} */
    VgFullscreen.prototype.subscriptions;
    /** @type {?} */
    VgFullscreen.prototype.ariaValue;
    /** @type {?} */
    VgFullscreen.prototype.API;
    /** @type {?} */
    VgFullscreen.prototype.fsAPI;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-mute/vg-mute.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgMute {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.subscriptions = [];
        this.ariaValue = 'unmuted';
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        this.currentVolume = this.target.volume;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.changeMuteState();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        // On press Enter (13) or Space (32)
        if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.changeMuteState();
        }
    }
    /**
     * @return {?}
     */
    changeMuteState() {
        /** @type {?} */
        const volume = this.getVolume();
        if (volume === 0) {
            if (this.target.volume === 0 && this.currentVolume === 0) {
                this.currentVolume = 1;
            }
            this.target.volume = this.currentVolume;
        }
        else {
            this.currentVolume = volume;
            this.target.volume = 0;
        }
    }
    /**
     * @return {?}
     */
    getVolume() {
        /** @type {?} */
        const volume = this.target ? this.target.volume : 0;
        this.ariaValue = volume ? 'unmuted' : 'muted';
        return volume;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgMute.decorators = [
    { type: Component, args: [{
                selector: 'vg-mute',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="icon"
             [class.vg-icon-volume_up]="getVolume() >= 0.75"
             [class.vg-icon-volume_down]="getVolume() >= 0.25 && getVolume() < 0.75"
             [class.vg-icon-volume_mute]="getVolume() > 0 && getVolume() < 0.25"
             [class.vg-icon-volume_off]="getVolume() === 0"
             tabindex="0"
             role="button"
             aria-label="mute button"
             [attr.aria-valuetext]="ariaValue">
        </div>`,
                styles: [`
        vg-mute {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            height: 50px;
            width: 50px;
            cursor: pointer;
            color: white;
            line-height: 50px;
        }
        vg-mute .icon {
            pointer-events: none;
        }
    `]
            }] }
];
/** @nocollapse */
VgMute.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgMute.propDecorators = {
    vgFor: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    VgMute.prototype.vgFor;
    /** @type {?} */
    VgMute.prototype.elem;
    /** @type {?} */
    VgMute.prototype.target;
    /** @type {?} */
    VgMute.prototype.currentVolume;
    /** @type {?} */
    VgMute.prototype.subscriptions;
    /** @type {?} */
    VgMute.prototype.ariaValue;
    /** @type {?} */
    VgMute.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-volume/vg-volume.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgVolume {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
        this.isDragging = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        this.ariaValue = this.getVolume() * 100;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.setVolume(this.calculateVolume(event.clientX));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        this.mouseDownPosX = event.clientX;
        this.isDragging = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrag(event) {
        if (this.isDragging) {
            this.setVolume(this.calculateVolume(event.clientX));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onStopDrag(event) {
        if (this.isDragging) {
            this.isDragging = false;
            if (this.mouseDownPosX === event.clientX) {
                this.setVolume(this.calculateVolume(event.clientX));
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    arrowAdjustVolume(event) {
        if (event.keyCode === 38 || event.keyCode === 39) {
            event.preventDefault();
            this.setVolume(Math.max(0, Math.min(100, this.getVolume() * 100 + 10)));
        }
        else if (event.keyCode === 37 || event.keyCode === 40) {
            event.preventDefault();
            this.setVolume(Math.max(0, Math.min(100, this.getVolume() * 100 - 10)));
        }
    }
    /**
     * @param {?} mousePosX
     * @return {?}
     */
    calculateVolume(mousePosX) {
        /** @type {?} */
        const recObj = this.volumeBarRef.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const volumeBarOffsetLeft = recObj.left;
        /** @type {?} */
        const volumeBarWidth = recObj.width;
        return (mousePosX - volumeBarOffsetLeft) / volumeBarWidth * 100;
    }
    /**
     * @param {?} vol
     * @return {?}
     */
    setVolume(vol) {
        this.target.volume = Math.max(0, Math.min(1, vol / 100));
        this.ariaValue = this.target.volume * 100;
    }
    /**
     * @return {?}
     */
    getVolume() {
        return this.target ? this.target.volume : 0;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        (s) => s.unsubscribe()));
    }
}
VgVolume.decorators = [
    { type: Component, args: [{
                selector: 'vg-volume',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div
            #volumeBar
            class="volumeBar"
            tabindex="0"
            role="slider"
            aria-label="volume level"
            aria-level="polite"
            [attr.aria-valuenow]="ariaValue"
            aria-valuemin="0"
            aria-valuemax="100"
            aria-orientation="horizontal"
            [attr.aria-valuetext]="ariaValue + '%'"
            (click)="onClick($event)"
            (mousedown)="onMouseDown($event)">
            <div class="volumeBackground" [ngClass]="{dragging: isDragging}">
                <div class="volumeValue" [style.width]="(getVolume() * (100-15)) + '%'"></div>
                <div class="volumeKnob" [style.left]="(getVolume() * (100-15)) + '%'"></div>
            </div>
        </div>
    `,
                styles: [`
        vg-volume {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            height: 50px;
            width: 100px;
            cursor: pointer;
            color: white;
            line-height: 50px;
        }
        vg-volume .volumeBar {
            position: relative;
            display: flex;
            flex-grow: 1;
            align-items: center;
        }
        vg-volume .volumeBackground {
            display: flex;
            flex-grow: 1;
            height: 5px;
            pointer-events: none;
            background-color: #333;
        }
        vg-volume .volumeValue {
            display: flex;
            height: 5px;
            pointer-events: none;
            background-color: #FFF;
            transition:all 0.2s ease-out;
        }
        vg-volume .volumeKnob {
            position: absolute;
            width: 15px; height: 15px;
            left: 0; top: 50%;
            transform: translateY(-50%);
            border-radius: 15px;
            pointer-events: none;
            background-color: #FFF;
            transition:all 0.2s ease-out;
        }
        vg-volume .volumeBackground.dragging .volumeValue,
        vg-volume .volumeBackground.dragging .volumeKnob {
            transition: none;
        }
    `]
            }] }
];
/** @nocollapse */
VgVolume.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgVolume.propDecorators = {
    vgFor: [{ type: Input }],
    volumeBarRef: [{ type: ViewChild, args: ['volumeBar', { static: true },] }],
    onDrag: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }],
    onStopDrag: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }],
    arrowAdjustVolume: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    VgVolume.prototype.vgFor;
    /** @type {?} */
    VgVolume.prototype.volumeBarRef;
    /** @type {?} */
    VgVolume.prototype.elem;
    /** @type {?} */
    VgVolume.prototype.target;
    /** @type {?} */
    VgVolume.prototype.isDragging;
    /** @type {?} */
    VgVolume.prototype.mouseDownPosX;
    /** @type {?} */
    VgVolume.prototype.ariaValue;
    /** @type {?} */
    VgVolume.prototype.subscriptions;
    /** @type {?} */
    VgVolume.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-play-pause/vg-play-pause.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgPlayPause {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.subscriptions = [];
        this.ariaValue = VgStates.VG_PAUSED;
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.playPause();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        // On press Enter (13) or Space (32)
        if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.playPause();
        }
    }
    /**
     * @return {?}
     */
    playPause() {
        /** @type {?} */
        const state = this.getState();
        switch (state) {
            case VgStates.VG_PLAYING:
                this.target.pause();
                break;
            case VgStates.VG_PAUSED:
            case VgStates.VG_ENDED:
                this.target.play();
                break;
        }
    }
    /**
     * @return {?}
     */
    getState() {
        this.ariaValue = this.target ? this.target.state : VgStates.VG_PAUSED;
        return this.ariaValue;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgPlayPause.decorators = [
    { type: Component, args: [{
                selector: 'vg-play-pause',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="icon"
             [class.vg-icon-pause]="getState() === 'playing'"
             [class.vg-icon-play_arrow]="getState() === 'paused' || getState() === 'ended'"
             tabindex="0"
             role="button"
             [attr.aria-label]="getState() === 'paused'?'play':'pause'"
             [attr.aria-valuetext]="ariaValue">
        </div>`,
                styles: [`
        vg-play-pause {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            height: 50px;
            width: 50px;
            cursor: pointer;
            color: white;
            line-height: 50px;
        }
        vg-play-pause .icon {
            pointer-events: none;
        }
    `]
            }] }
];
/** @nocollapse */
VgPlayPause.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgPlayPause.propDecorators = {
    vgFor: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    VgPlayPause.prototype.vgFor;
    /** @type {?} */
    VgPlayPause.prototype.elem;
    /** @type {?} */
    VgPlayPause.prototype.target;
    /** @type {?} */
    VgPlayPause.prototype.subscriptions;
    /** @type {?} */
    VgPlayPause.prototype.ariaValue;
    /** @type {?} */
    VgPlayPause.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-playback-button/vg-playback-button.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgPlaybackButton {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.subscriptions = [];
        this.ariaValue = 1;
        this.elem = ref.nativeElement;
        this.playbackValues = ['0.5', '1.0', '1.5', '2.0'];
        this.playbackIndex = 1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.updatePlaybackSpeed();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        // On press Enter (13) or Space (32)
        if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.updatePlaybackSpeed();
        }
    }
    /**
     * @return {?}
     */
    updatePlaybackSpeed() {
        this.playbackIndex = ++this.playbackIndex % this.playbackValues.length;
        if (this.target instanceof VgAPI) {
            this.target.playbackRate = (this.playbackValues[this.playbackIndex]);
        }
        else {
            this.target.playbackRate[this.vgFor] = (this.playbackValues[this.playbackIndex]);
        }
    }
    /**
     * @return {?}
     */
    getPlaybackRate() {
        this.ariaValue = this.target ? this.target.playbackRate : 1.0;
        return this.ariaValue;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgPlaybackButton.decorators = [
    { type: Component, args: [{
                selector: 'vg-playback-button',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span class="button"
          tabindex="0"
          role="button"
          aria-label="playback speed button"
          [attr.aria-valuetext]="ariaValue">
        {{getPlaybackRate()}}x
    </span>`,
                styles: [`
        vg-playback-button {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            height: 50px;
            width: 50px;
            cursor: pointer;
            color: white;
            line-height: 50px;
            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
        }
        vg-playback-button .button {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
        }
    `]
            }] }
];
/** @nocollapse */
VgPlaybackButton.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgPlaybackButton.propDecorators = {
    vgFor: [{ type: Input }],
    playbackValues: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    VgPlaybackButton.prototype.vgFor;
    /** @type {?} */
    VgPlaybackButton.prototype.elem;
    /** @type {?} */
    VgPlaybackButton.prototype.target;
    /** @type {?} */
    VgPlaybackButton.prototype.playbackValues;
    /** @type {?} */
    VgPlaybackButton.prototype.playbackIndex;
    /** @type {?} */
    VgPlaybackButton.prototype.subscriptions;
    /** @type {?} */
    VgPlaybackButton.prototype.ariaValue;
    /** @type {?} */
    VgPlaybackButton.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-scrub-bar/vg-scrub-bar.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgScrubBar {
    /**
     * @param {?} ref
     * @param {?} API
     * @param {?} vgControlsHiddenState
     */
    constructor(ref, API, vgControlsHiddenState) {
        this.API = API;
        this.hideScrubBar = false;
        this.vgSlider = true;
        this.isSeeking = false;
        this.wasPlaying = false;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
        this.subscriptions.push(vgControlsHiddenState.isHidden.subscribe((/**
         * @param {?} hide
         * @return {?}
         */
        hide => this.onHideScrubBar(hide))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    /**
     * @protected
     * @return {?}
     */
    seekStart() {
        if (this.target.canPlay) {
            this.isSeeking = true;
            if (this.target.state === VgStates.VG_PLAYING) {
                this.wasPlaying = true;
            }
            this.target.pause();
        }
    }
    /**
     * @protected
     * @param {?} offset
     * @return {?}
     */
    seekMove(offset) {
        if (this.isSeeking) {
            /** @type {?} */
            const percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);
            this.target.time.current = percentage * this.target.time.total / 100;
            this.target.seekTime(percentage, true);
        }
    }
    /**
     * @protected
     * @param {?} offset
     * @return {?}
     */
    seekEnd(offset) {
        this.isSeeking = false;
        if (this.target.canPlay) {
            /** @type {?} */
            const percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);
            this.target.seekTime(percentage, true);
            if (this.wasPlaying) {
                this.wasPlaying = false;
                this.target.play();
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    touchEnd() {
        this.isSeeking = false;
        if (this.wasPlaying) {
            this.wasPlaying = false;
            this.target.play();
        }
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    getTouchOffset(event) {
        /** @type {?} */
        let offsetLeft = 0;
        /** @type {?} */
        let element = event.target;
        while (element) {
            offsetLeft += element.offsetLeft;
            element = element.offsetParent;
        }
        return event.touches[0].pageX - offsetLeft;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseDownScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive) {
                if (!this.vgSlider) {
                    this.seekEnd($event.offsetX);
                }
                else {
                    this.seekStart();
                }
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseMoveScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.seekMove($event.offsetX);
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseUpScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.seekEnd($event.offsetX);
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchStartScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive) {
                if (!this.vgSlider) {
                    this.seekEnd(this.getTouchOffset($event));
                }
                else {
                    this.seekStart();
                }
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchMoveScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.seekMove(this.getTouchOffset($event));
            }
        }
    }
    // @ts-ignore
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchCancelScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.touchEnd();
            }
        }
    }
    // @ts-ignore
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchEndScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.touchEnd();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    arrowAdjustVolume(event) {
        if (this.target) {
            if (event.keyCode === 38 || event.keyCode === 39) {
                event.preventDefault();
                this.target.seekTime((this.target.time.current + 5000) / 1000, false);
            }
            else if (event.keyCode === 37 || event.keyCode === 40) {
                event.preventDefault();
                this.target.seekTime((this.target.time.current - 5000) / 1000, false);
            }
        }
    }
    /**
     * @return {?}
     */
    getPercentage() {
        return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';
    }
    /**
     * @param {?} hide
     * @return {?}
     */
    onHideScrubBar(hide) {
        this.hideScrubBar = hide;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgScrubBar.decorators = [
    { type: Component, args: [{
                selector: 'vg-scrub-bar',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="scrubBar"
             tabindex="0"
             role="slider"
             aria-label="scrub bar"
             aria-level="polite"
             [attr.aria-valuenow]="getPercentage()"
             aria-valuemin="0"
             aria-valuemax="100"
             [attr.aria-valuetext]="getPercentage() + '%'">
            <ng-content></ng-content>
        </div>
    `,
                styles: [`
        vg-scrub-bar {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            position: absolute;
            width: 100%;
            height: 5px;
            bottom: 50px;
            margin: 0;
            cursor: pointer;
            align-items: center;
            background: rgba(0, 0, 0, 0.75);
            z-index: 250;
            -webkit-transition: bottom 1s, opacity 0.5s;
            -khtml-transition: bottom 1s, opacity 0.5s;
            -moz-transition: bottom 1s, opacity 0.5s;
            -ms-transition: bottom 1s, opacity 0.5s;
            transition: bottom 1s, opacity 0.5s;
        }
        vg-scrub-bar .scrubBar {
            position: relative;
            display: flex;
            flex-grow: 1;
            align-items: center;
            height: 100%;
        }
        vg-controls vg-scrub-bar {
            position: relative;
            bottom: 0;
            background: transparent;
            height: 50px;
            flex-grow: 1;
            flex-basis: 0;
            margin: 0 10px;
            -webkit-transition: initial;
            -khtml-transition: initial;
            -moz-transition: initial;
            -ms-transition: initial;
            transition: initial;
        }
        vg-scrub-bar.hide {
            bottom: 0;
            opacity: 0;
        }
        vg-controls vg-scrub-bar.hide {
            bottom: initial;
            opacity: initial;
        }
    `]
            }] }
];
/** @nocollapse */
VgScrubBar.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI },
    { type: VgControlsHidden }
];
VgScrubBar.propDecorators = {
    hideScrubBar: [{ type: HostBinding, args: ['class.hide',] }],
    vgFor: [{ type: Input }],
    vgSlider: [{ type: Input }],
    onMouseDownScrubBar: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onMouseMoveScrubBar: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }],
    onMouseUpScrubBar: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }],
    onTouchStartScrubBar: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
    onTouchMoveScrubBar: [{ type: HostListener, args: ['document:touchmove', ['$event'],] }],
    onTouchCancelScrubBar: [{ type: HostListener, args: ['document:touchcancel', ['$event'],] }],
    onTouchEndScrubBar: [{ type: HostListener, args: ['document:touchend', ['$event'],] }],
    arrowAdjustVolume: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    VgScrubBar.prototype.hideScrubBar;
    /** @type {?} */
    VgScrubBar.prototype.vgFor;
    /** @type {?} */
    VgScrubBar.prototype.vgSlider;
    /** @type {?} */
    VgScrubBar.prototype.elem;
    /** @type {?} */
    VgScrubBar.prototype.target;
    /** @type {?} */
    VgScrubBar.prototype.isSeeking;
    /** @type {?} */
    VgScrubBar.prototype.wasPlaying;
    /** @type {?} */
    VgScrubBar.prototype.subscriptions;
    /** @type {?} */
    VgScrubBar.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-scrub-bar/vg-scrub-bar-buffering-time/vg-scrub-bar-buffering-time.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgScrubBarBufferingTime {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    /**
     * @return {?}
     */
    getBufferTime() {
        /** @type {?} */
        let bufferTime = '0%';
        if (this.target && this.target.buffer && this.target.buffered.length) {
            if (this.target.time.total === 0) {
                bufferTime = '0%';
            }
            else {
                bufferTime = ((this.target.buffer.end / this.target.time.total) * 100) + '%';
            }
        }
        return bufferTime;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgScrubBarBufferingTime.decorators = [
    { type: Component, args: [{
                selector: 'vg-scrub-bar-buffering-time',
                encapsulation: ViewEncapsulation.None,
                template: `<div class="background" [style.width]="getBufferTime()"></div>`,
                styles: [`
        vg-scrub-bar-buffering-time {
            display: flex;
            width: 100%;
            height: 5px;
            pointer-events: none;
            position: absolute;
        }
        vg-scrub-bar-buffering-time .background {
            background-color: rgba(255, 255, 255, 0.3);
        }
        vg-controls vg-scrub-bar-buffering-time {
            position: absolute;
            top: calc(50% - 3px);
        }
        vg-controls vg-scrub-bar-buffering-time .background {
            -webkit-border-radius: 2px;
            -moz-border-radius: 2px;
            border-radius: 2px;
        }
    `]
            }] }
];
/** @nocollapse */
VgScrubBarBufferingTime.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgScrubBarBufferingTime.propDecorators = {
    vgFor: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgScrubBarBufferingTime.prototype.vgFor;
    /** @type {?} */
    VgScrubBarBufferingTime.prototype.elem;
    /** @type {?} */
    VgScrubBarBufferingTime.prototype.target;
    /** @type {?} */
    VgScrubBarBufferingTime.prototype.subscriptions;
    /** @type {?} */
    VgScrubBarBufferingTime.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-scrub-bar/vg-scrub-bar-cue-points/vg-scrub-bar-cue-points.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:no-conflicting-lifecycle
// tslint:disable:component-class-suffix
// tslint:disable:no-string-literal
class VgScrubBarCuePoints {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.onLoadedMetadataCalled = false;
        this.cuePoints = [];
        this.subscriptions = [];
        this.totalCues = 0;
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        /** @type {?} */
        const onTimeUpdate = this.target.subscriptions.loadedMetadata;
        this.subscriptions.push(onTimeUpdate.subscribe(this.onLoadedMetadata.bind(this)));
        if (this.onLoadedMetadataCalled) {
            this.onLoadedMetadata();
        }
    }
    /**
     * @return {?}
     */
    onLoadedMetadata() {
        if (this.vgCuePoints) {
            // We need to transform the TextTrackCueList to Array or it doesn't work on IE11/Edge.
            // See: https://github.com/videogular/videogular2/issues/369
            this.cuePoints = [];
            for (let i = 0, l = this.vgCuePoints.length; i < l; i++) {
                /** @type {?} */
                const end = (this.vgCuePoints[i].endTime >= 0) ? this.vgCuePoints[i].endTime : this.vgCuePoints[i].startTime + 1;
                /** @type {?} */
                const cuePointDuration = (end - this.vgCuePoints[i].startTime) * 1000;
                /** @type {?} */
                let position = '0';
                /** @type {?} */
                let percentWidth = '0';
                if (typeof cuePointDuration === 'number' && this.target.time.total) {
                    percentWidth = ((cuePointDuration * 100) / this.target.time.total) + '%';
                    position = (this.vgCuePoints[i].startTime * 100 / (Math.round(this.target.time.total / 1000))) + '%';
                }
                ((/** @type {?} */ (this.vgCuePoints[i]))).$$style = {
                    width: percentWidth,
                    left: position
                };
                this.cuePoints.push(this.vgCuePoints[i]);
            }
        }
    }
    /**
     * @return {?}
     */
    updateCuePoints() {
        if (!this.target) {
            this.onLoadedMetadataCalled = true;
            return;
        }
        this.onLoadedMetadata();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['vgCuePoints'].currentValue) {
            this.updateCuePoints();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.vgCuePoints) {
            /** @type {?} */
            const changes = this.totalCues !== this.vgCuePoints.length;
            if (changes) {
                this.totalCues = this.vgCuePoints.length;
                this.updateCuePoints();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgScrubBarCuePoints.decorators = [
    { type: Component, args: [{
                selector: 'vg-scrub-bar-cue-points',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="cue-point-container">
            <span *ngFor="let cp of cuePoints" [style.width]="cp.$$style?.width" [style.left]="cp.$$style?.left"
                  class="cue-point"></span>
        </div>
    `,
                styles: [`
        vg-scrub-bar-cue-points {
            display: flex;
            width: 100%;
            height: 5px;
            pointer-events: none;
            position: absolute;
        }
        vg-scrub-bar-cue-points .cue-point-container .cue-point {
            position: absolute;
            height: 5px;
            background-color: rgba(255, 204, 0, 0.7);
        }
        vg-controls vg-scrub-bar-cue-points {
            position: absolute;
            top: calc(50% - 3px);
        }
    `]
            }] }
];
/** @nocollapse */
VgScrubBarCuePoints.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgScrubBarCuePoints.propDecorators = {
    vgCuePoints: [{ type: Input }],
    vgFor: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgScrubBarCuePoints.prototype.vgCuePoints;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.vgFor;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.elem;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.target;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.onLoadedMetadataCalled;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.cuePoints;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.subscriptions;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.totalCues;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-scrub-bar/vg-scrub-bar-current-time/vg-scrub-bar-current-time.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgScrubBarCurrentTime {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.vgSlider = false;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    /**
     * @return {?}
     */
    getPercentage() {
        return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgScrubBarCurrentTime.decorators = [
    { type: Component, args: [{
                selector: 'vg-scrub-bar-current-time',
                encapsulation: ViewEncapsulation.None,
                template: `<div class="background" [style.width]="getPercentage()"></div><span class="slider" *ngIf="vgSlider"></span>`,
                styles: [`
        vg-scrub-bar-current-time {
            display: flex;
            width: 100%;
            height: 5px;
            pointer-events: none;
            position: absolute;
        }
        vg-scrub-bar-current-time .background {
            background-color: white;
        }
        vg-controls vg-scrub-bar-current-time {
            position: absolute;
            top: calc(50% - 3px);
            -webkit-border-radius: 2px;
            -moz-border-radius: 2px;
            border-radius: 2px;
        }
        vg-controls vg-scrub-bar-current-time .background {
            border: 1px solid white;
            -webkit-border-radius: 2px;
            -moz-border-radius: 2px;
            border-radius: 2px;
        }

        vg-scrub-bar-current-time .slider{
            background: white;
            height: 15px;
            width: 15px;
            border-radius: 50%;
            box-shadow: 0px 0px 10px black;
            margin-top: -5px;
            margin-left: -10px;
        }
    `]
            }] }
];
/** @nocollapse */
VgScrubBarCurrentTime.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgScrubBarCurrentTime.propDecorators = {
    vgFor: [{ type: Input }],
    vgSlider: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgScrubBarCurrentTime.prototype.vgFor;
    /** @type {?} */
    VgScrubBarCurrentTime.prototype.vgSlider;
    /** @type {?} */
    VgScrubBarCurrentTime.prototype.elem;
    /** @type {?} */
    VgScrubBarCurrentTime.prototype.target;
    /** @type {?} */
    VgScrubBarCurrentTime.prototype.subscriptions;
    /** @type {?} */
    VgScrubBarCurrentTime.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-time-display/vg-time-display.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Workaround until we can use UTC with Angular Date Pipe
class VgUtcPipe {
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    transform(value, format) {
        /** @type {?} */
        const date = new Date(value);
        /** @type {?} */
        let result = format;
        /** @type {?} */
        let ss = date.getUTCSeconds();
        /** @type {?} */
        let mm = date.getUTCMinutes();
        /** @type {?} */
        let hh = date.getUTCHours();
        if (ss < 10) {
            ss = '0' + ss;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        if (hh < 10) {
            hh = '0' + hh;
        }
        result = result.replace(/ss/g, (/** @type {?} */ (ss)));
        result = result.replace(/mm/g, (/** @type {?} */ (mm)));
        result = result.replace(/hh/g, (/** @type {?} */ (hh)));
        return result;
    }
}
VgUtcPipe.decorators = [
    { type: Pipe, args: [{ name: 'vgUtc' },] }
];
// tslint:disable:component-class-suffix
class VgTimeDisplay {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.vgProperty = 'current';
        this.vgFormat = 'mm:ss';
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    /**
     * @return {?}
     */
    getTime() {
        /** @type {?} */
        let t = 0;
        if (this.target) {
            t = Math.round(this.target.time[this.vgProperty]);
            t = isNaN(t) || this.target.isLive ? 0 : t;
        }
        return t;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgTimeDisplay.decorators = [
    { type: Component, args: [{
                selector: 'vg-time-display',
                encapsulation: ViewEncapsulation.None,
                template: `
        <span *ngIf="target?.isLive">LIVE</span>
        <span *ngIf="!target?.isLive">{{ getTime() | vgUtc:vgFormat }}</span>
        <ng-content></ng-content>
    `,
                styles: [`
        vg-time-display {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            height: 50px;
            width: 60px;
            cursor: pointer;
            color: white;
            line-height: 50px;
            pointer-events: none;
            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
        }
    `]
            }] }
];
/** @nocollapse */
VgTimeDisplay.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgTimeDisplay.propDecorators = {
    vgFor: [{ type: Input }],
    vgProperty: [{ type: Input }],
    vgFormat: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgTimeDisplay.prototype.vgFor;
    /** @type {?} */
    VgTimeDisplay.prototype.vgProperty;
    /** @type {?} */
    VgTimeDisplay.prototype.vgFormat;
    /** @type {?} */
    VgTimeDisplay.prototype.elem;
    /** @type {?} */
    VgTimeDisplay.prototype.target;
    /** @type {?} */
    VgTimeDisplay.prototype.subscriptions;
    /** @type {?} */
    VgTimeDisplay.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-track-selector/vg-track-selector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Option() { }
if (false) {
    /** @type {?} */
    Option.prototype.id;
    /** @type {?} */
    Option.prototype.label;
    /** @type {?} */
    Option.prototype.selected;
}
// tslint:disable:component-class-suffix
class VgTrackSelector {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        /** @type {?} */
        const subs = Array.from(((/** @type {?} */ (this.API.getMasterMedia().elem))).children)
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.tagName === 'TRACK'))
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.kind === 'subtitles'))
            .map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => ({
            label: item.label,
            selected: item.default === true,
            id: item.srclang
        })));
        this.tracks = [
            ...subs,
            {
                id: null,
                label: 'Off',
                selected: subs.every((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item.selected === false))
            }
        ];
        /** @type {?} */
        const track = this.tracks.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.selected === true))[0];
        this.trackSelected = track.id;
        this.ariaValue = track.label;
    }
    /**
     * @param {?} trackId
     * @return {?}
     */
    selectTrack(trackId) {
        this.trackSelected = (trackId === 'null') ? null : trackId;
        this.ariaValue = 'No track selected';
        Array.from(((/** @type {?} */ (this.API.getMasterMedia().elem))).textTracks)
            .forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (item.language === trackId) {
                this.ariaValue = item.label;
                item.mode = 'showing';
            }
            else {
                item.mode = 'hidden';
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgTrackSelector.decorators = [
    { type: Component, args: [{
                selector: 'vg-track-selector',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="container">
            <div class="track-selected"
                 [class.vg-icon-closed_caption]="!trackSelected">
                {{ trackSelected || '' }}
            </div>

            <select class="trackSelector"
                    (change)="selectTrack($event.target.value)"
                    tabindex="0"
                    aria-label="track selector"
                    [attr.aria-valuetext]="ariaValue">
                <option
                    *ngFor="let track of tracks"
                    [value]="track.id"
                    [selected]="track.selected === true">
                    {{ track.label }}
                </option>
            </select>
        </div>
    `,
                styles: [`
        vg-track-selector {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            width: 50px;
            height: 50px;
            cursor: pointer;
            color: white;
            line-height: 50px;
        }
        vg-track-selector .container {
            position: relative;
            display: flex;
            flex-grow: 1;
            align-items: center;

            padding: 0;
            margin: 5px;
        }
        vg-track-selector select.trackSelector {
            width: 50px;
            padding: 5px 8px;
            border: none;
            background: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            color: transparent;
            font-size: 16px;
        }
        vg-track-selector select.trackSelector::-ms-expand {
            display: none;
        }
        vg-track-selector select.trackSelector option {
            color: #000;
        }
        vg-track-selector .track-selected {
            position: absolute;
            width: 100%;
            height: 50px;
            top: -6px;
            text-align: center;
            text-transform: uppercase;
            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
            padding-top: 2px;
            pointer-events: none;
        }
        vg-track-selector .vg-icon-closed_caption:before {
            width: 100%;
        }
    `]
            }] }
];
/** @nocollapse */
VgTrackSelector.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgTrackSelector.propDecorators = {
    vgFor: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgTrackSelector.prototype.vgFor;
    /** @type {?} */
    VgTrackSelector.prototype.elem;
    /** @type {?} */
    VgTrackSelector.prototype.target;
    /** @type {?} */
    VgTrackSelector.prototype.tracks;
    /** @type {?} */
    VgTrackSelector.prototype.trackSelected;
    /** @type {?} */
    VgTrackSelector.prototype.subscriptions;
    /** @type {?} */
    VgTrackSelector.prototype.ariaValue;
    /** @type {?} */
    VgTrackSelector.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-quality-selector/vg-quality-selector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:no-output-on-prefix
// tslint:disable:component-class-suffix
// tslint:disable:no-string-literal
class VgQualitySelector {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.onBitrateChange = new EventEmitter();
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['bitrates'].currentValue && changes['bitrates'].currentValue.length) {
            this.bitrates.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.label = (item.label || Math.round(item.bitrate / 1000)).toString()));
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    selectBitrate(index) {
        this.bitrateSelected = this.bitrates[index];
        this.onBitrateChange.emit(this.bitrates[index]);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgQualitySelector.decorators = [
    { type: Component, args: [{
                selector: 'vg-quality-selector',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="container">
            <div class="quality-selected"
                 [class.vg-icon-hd]="!bitrateSelected">
                {{ bitrateSelected?.label }}
            </div>

            <select class="quality-selector"
                    (change)="selectBitrate($event.target.value)"
                    tabindex="0"
                    aria-label="quality selector"
                    [attr.aria-valuetext]="ariaValue">
                <option
                    *ngFor="let bitrate of bitrates"
                    [value]="bitrate.qualityIndex.toString()"
                    [selected]="bitrate.qualityIndex === bitrateSelected?.qualityIndex">
                    {{ bitrate.label }}
                </option>
            </select>
        </div>
    `,
                styles: [`
        vg-quality-selector {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            width: 50px;
            height: 50px;
            cursor: pointer;
            color: white;
            line-height: 50px;
        }
        vg-quality-selector .container {
            position: relative;
            display: flex;
            flex-grow: 1;
            align-items: center;

            padding: 0;
            margin: 5px;
        }
        vg-quality-selector select.quality-selector {
            width: 50px;
            padding: 5px 8px;
            border: none;
            background: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            color: transparent;
            font-size: 16px;
        }
        vg-quality-selector select.quality-selector::-ms-expand {
            display: none;
        }
        vg-quality-selector select.quality-selector option {
            color: #000;
        }
        vg-quality-selector .quality-selected {
            position: absolute;
            width: 100%;
            height: 50px;
            top: -6px;
            text-align: center;
            text-transform: uppercase;
            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
            padding-top: 2px;
            pointer-events: none;
        }
        vg-quality-selector .vg-icon-closed_caption:before {
            width: 100%;
        }
    `]
            }] }
];
/** @nocollapse */
VgQualitySelector.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgQualitySelector.propDecorators = {
    bitrates: [{ type: Input }],
    onBitrateChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    VgQualitySelector.prototype.bitrates;
    /** @type {?} */
    VgQualitySelector.prototype.onBitrateChange;
    /** @type {?} */
    VgQualitySelector.prototype.bitrateSelected;
    /** @type {?} */
    VgQualitySelector.prototype.elem;
    /** @type {?} */
    VgQualitySelector.prototype.target;
    /** @type {?} */
    VgQualitySelector.prototype.subscriptions;
    /** @type {?} */
    VgQualitySelector.prototype.ariaValue;
    /** @type {?} */
    VgQualitySelector.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-controls.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgControlsModule {
}
VgControlsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    VgControls,
                    VgFullscreen,
                    VgMute,
                    VgVolume,
                    VgPlayPause,
                    VgPlaybackButton,
                    VgScrubBar,
                    VgScrubBarBufferingTime,
                    VgScrubBarCuePoints,
                    VgScrubBarCurrentTime,
                    VgTimeDisplay,
                    VgUtcPipe,
                    VgTrackSelector,
                    VgQualitySelector
                ],
                exports: [
                    VgControls,
                    VgFullscreen,
                    VgMute,
                    VgVolume,
                    VgPlayPause,
                    VgPlaybackButton,
                    VgScrubBar,
                    VgScrubBarBufferingTime,
                    VgScrubBarCuePoints,
                    VgScrubBarCurrentTime,
                    VgTimeDisplay,
                    VgUtcPipe,
                    VgTrackSelector,
                    VgQualitySelector
                ],
                providers: [VgControlsHidden]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/events/vg-events.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgEvents {
}
VgEvents.VG_ABORT = 'abort';
VgEvents.VG_CAN_PLAY = 'canplay';
VgEvents.VG_CAN_PLAY_THROUGH = 'canplaythrough';
VgEvents.VG_DURATION_CHANGE = 'durationchange';
VgEvents.VG_EMPTIED = 'emptied';
VgEvents.VG_ENCRYPTED = 'encrypted';
VgEvents.VG_ENDED = 'ended';
VgEvents.VG_ERROR = 'error';
VgEvents.VG_LOADED_DATA = 'loadeddata';
VgEvents.VG_LOADED_METADATA = 'loadedmetadata';
VgEvents.VG_LOAD_START = 'loadstart';
VgEvents.VG_PAUSE = 'pause';
VgEvents.VG_PLAY = 'play';
VgEvents.VG_PLAYING = 'playing';
VgEvents.VG_PROGRESS = 'progress';
VgEvents.VG_RATE_CHANGE = 'ratechange';
VgEvents.VG_SEEK = 'seek';
VgEvents.VG_SEEKED = 'seeked';
VgEvents.VG_SEEKING = 'seeking';
VgEvents.VG_STALLED = 'stalled';
VgEvents.VG_SUSPEND = 'suspend';
VgEvents.VG_TIME_UPDATE = 'timeupdate';
VgEvents.VG_VOLUME_CHANGE = 'volumechange';
VgEvents.VG_WAITING = 'waiting';
VgEvents.VG_LOAD = 'load';
VgEvents.VG_ENTER = 'enter';
VgEvents.VG_EXIT = 'exit';
VgEvents.VG_START_ADS = 'startads';
VgEvents.VG_END_ADS = 'endads';
VgEvents.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    VgEvents.VG_ABORT;
    /** @type {?} */
    VgEvents.VG_CAN_PLAY;
    /** @type {?} */
    VgEvents.VG_CAN_PLAY_THROUGH;
    /** @type {?} */
    VgEvents.VG_DURATION_CHANGE;
    /** @type {?} */
    VgEvents.VG_EMPTIED;
    /** @type {?} */
    VgEvents.VG_ENCRYPTED;
    /** @type {?} */
    VgEvents.VG_ENDED;
    /** @type {?} */
    VgEvents.VG_ERROR;
    /** @type {?} */
    VgEvents.VG_LOADED_DATA;
    /** @type {?} */
    VgEvents.VG_LOADED_METADATA;
    /** @type {?} */
    VgEvents.VG_LOAD_START;
    /** @type {?} */
    VgEvents.VG_PAUSE;
    /** @type {?} */
    VgEvents.VG_PLAY;
    /** @type {?} */
    VgEvents.VG_PLAYING;
    /** @type {?} */
    VgEvents.VG_PROGRESS;
    /** @type {?} */
    VgEvents.VG_RATE_CHANGE;
    /** @type {?} */
    VgEvents.VG_SEEK;
    /** @type {?} */
    VgEvents.VG_SEEKED;
    /** @type {?} */
    VgEvents.VG_SEEKING;
    /** @type {?} */
    VgEvents.VG_STALLED;
    /** @type {?} */
    VgEvents.VG_SUSPEND;
    /** @type {?} */
    VgEvents.VG_TIME_UPDATE;
    /** @type {?} */
    VgEvents.VG_VOLUME_CHANGE;
    /** @type {?} */
    VgEvents.VG_WAITING;
    /** @type {?} */
    VgEvents.VG_LOAD;
    /** @type {?} */
    VgEvents.VG_ENTER;
    /** @type {?} */
    VgEvents.VG_EXIT;
    /** @type {?} */
    VgEvents.VG_START_ADS;
    /** @type {?} */
    VgEvents.VG_END_ADS;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-media/vg-media.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:directive-class-suffix
class VgMedia {
    /**
     * @param {?} api
     * @param {?} ref
     */
    constructor(api, ref) {
        this.api = api;
        this.ref = ref;
        this.state = VgStates.VG_PAUSED;
        this.time = { current: 0, total: 0, left: 0 };
        this.buffer = { end: 0 };
        this.canPlay = false;
        this.canPlayThrough = false;
        this.isMetadataLoaded = false;
        this.isWaiting = false;
        this.isCompleted = false;
        this.isLive = false;
        this.isBufferDetected = false;
        this.checkInterval = 200;
        this.currentPlayPos = 0;
        this.lastPlayPos = 0;
        this.playAtferSync = false;
        this.bufferDetected = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.vgMedia.nodeName) {
            // It's a native element
            this.elem = this.vgMedia;
        }
        else {
            // It's an Angular Class
            this.elem = this.vgMedia.elem;
        }
        // Just in case we're creating this vgMedia dynamically register again into API
        this.api.registerMedia(this);
        this.subscriptions = {
            // Native events
            abort: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_ABORT),
            canPlay: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_CAN_PLAY),
            canPlayThrough: fromEvent(this.elem, VgEvents.VG_CAN_PLAY_THROUGH),
            durationChange: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_DURATION_CHANGE),
            emptied: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_EMPTIED),
            encrypted: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_ENCRYPTED),
            ended: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_ENDED),
            error: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_ERROR),
            loadedData: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_LOADED_DATA),
            loadedMetadata: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_LOADED_METADATA),
            loadStart: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_LOAD_START),
            pause: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_PAUSE),
            play: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_PLAY),
            playing: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_PLAYING),
            progress: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_PROGRESS),
            rateChange: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_RATE_CHANGE),
            seeked: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_SEEKED),
            seeking: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_SEEKING),
            stalled: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_STALLED),
            suspend: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_SUSPEND),
            timeUpdate: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_TIME_UPDATE),
            volumeChange: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_VOLUME_CHANGE),
            waiting: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_WAITING),
            // Advertisement only events
            startAds: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_START_ADS),
            endAds: fromEvent((/** @type {?} */ (this.elem)), VgEvents.VG_END_ADS),
            // See changes on <source> child elements to reload the video file
            mutation: new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            (observer) => {
                /** @type {?} */
                const domObs = new MutationObserver((/**
                 * @param {?} mutations
                 * @return {?}
                 */
                (mutations) => {
                    observer.next(mutations);
                }));
                domObs.observe((/** @type {?} */ (this.elem)), { childList: true, attributes: true });
                return (/**
                 * @return {?}
                 */
                () => {
                    domObs.disconnect();
                });
            })),
            // Custom buffering detection
            bufferDetected: this.bufferDetected
        };
        this.mutationObs = this.subscriptions.mutation.subscribe(this.onMutation.bind(this));
        this.canPlayObs = this.subscriptions.canPlay.subscribe(this.onCanPlay.bind(this));
        this.canPlayThroughObs = this.subscriptions.canPlayThrough.subscribe(this.onCanPlayThrough.bind(this));
        this.loadedMetadataObs = this.subscriptions.loadedMetadata.subscribe(this.onLoadMetadata.bind(this));
        this.waitingObs = this.subscriptions.waiting.subscribe(this.onWait.bind(this));
        this.progressObs = this.subscriptions.progress.subscribe(this.onProgress.bind(this));
        this.endedObs = this.subscriptions.ended.subscribe(this.onComplete.bind(this));
        this.playingObs = this.subscriptions.playing.subscribe(this.onStartPlaying.bind(this));
        this.playObs = this.subscriptions.play.subscribe(this.onPlay.bind(this));
        this.pauseObs = this.subscriptions.pause.subscribe(this.onPause.bind(this));
        this.timeUpdateObs = this.subscriptions.timeUpdate.subscribe(this.onTimeUpdate.bind(this));
        this.volumeChangeObs = this.subscriptions.volumeChange.subscribe(this.onVolumeChange.bind(this));
        this.errorObs = this.subscriptions.error.subscribe(this.onError.bind(this));
        if (this.vgMaster) {
            this.api.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => {
                this.prepareSync();
            }));
        }
    }
    /**
     * @return {?}
     */
    prepareSync() {
        /** @type {?} */
        const canPlayAll = [];
        for (const media in this.api.medias) {
            if (this.api.medias[media]) {
                canPlayAll.push(this.api.medias[media].subscriptions.canPlay);
            }
        }
        this.canPlayAllSubscription = combineLatest(canPlayAll).pipe(map((/**
         * @param {...?} params
         * @return {?}
         */
        (...params) => {
            /** @type {?} */
            const checkReadyState = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                return event.target.readyState === 4;
            });
            /** @type {?} */
            const allReady = params.some(checkReadyState);
            if (allReady && !this.syncSubscription) {
                this.startSync();
                this.syncSubscription.unsubscribe();
            }
        }))).subscribe();
    }
    /**
     * @return {?}
     */
    startSync() {
        this.syncSubscription = timer(0, 1000).subscribe((/**
         * @return {?}
         */
        () => {
            for (const media in this.api.medias) {
                if (this.api.medias[media] !== this) {
                    /** @type {?} */
                    const diff = this.api.medias[media].currentTime - this.currentTime;
                    if (diff < -0.3 || diff > 0.3) {
                        this.playAtferSync = (this.state === VgStates.VG_PLAYING);
                        this.pause();
                        this.api.medias[media].pause();
                        this.api.medias[media].currentTime = this.currentTime;
                    }
                    else {
                        if (this.playAtferSync) {
                            this.play();
                            this.api.medias[media].play();
                            this.playAtferSync = false;
                        }
                    }
                }
            }
        }));
    }
    /**
     * @param {?} mutations
     * @return {?}
     */
    onMutation(mutations) {
        // Detect changes only for source elements or src attribute
        for (let i = 0, l = mutations.length; i < l; i++) {
            /** @type {?} */
            const mut = mutations[i];
            if (mut.type === 'attributes' && mut.attributeName === 'src') {
                // Only load src file if it's not a blob (for DASH / HLS sources)
                // tslint:disable-next-line:no-string-literal
                if (mut.target['src'] && mut.target['src'].length > 0 && mut.target['src'].indexOf('blob:') < 0) {
                    this.loadMedia();
                    break;
                }
            }
            else if (mut.type === 'childList' && mut.removedNodes.length && mut.removedNodes[0].nodeName.toLowerCase() === 'source') {
                this.loadMedia();
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    loadMedia() {
        this.vgMedia.pause();
        this.vgMedia.currentTime = 0;
        // Start buffering until we can play the media file
        this.stopBufferCheck();
        this.isBufferDetected = true;
        this.bufferDetected.next(this.isBufferDetected);
        // TODO: This is ugly, we should find something cleaner. For some reason a TimerObservable doesn't works.
        setTimeout((/**
         * @return {?}
         */
        () => this.vgMedia.load()), 10);
    }
    /**
     * @return {?}
     */
    play() {
        // short-circuit if already playing
        if (this.playPromise || (this.state !== VgStates.VG_PAUSED && this.state !== VgStates.VG_ENDED)) {
            return;
        }
        this.playPromise = this.vgMedia.play();
        // browser has async play promise
        if (this.playPromise && this.playPromise.then && this.playPromise.catch) {
            this.playPromise
                .then((/**
             * @return {?}
             */
            () => {
                this.playPromise = null;
            }))
                .catch((/**
             * @return {?}
             */
            () => {
                this.playPromise = null;
                // deliberately empty for the sake of eating console noise
            }));
        }
        return this.playPromise;
    }
    /**
     * @return {?}
     */
    pause() {
        // browser has async play promise
        if (this.playPromise) {
            this.playPromise
                .then((/**
             * @return {?}
             */
            () => {
                this.vgMedia.pause();
            }));
        }
        else {
            this.vgMedia.pause();
        }
    }
    /**
     * @return {?}
     */
    get id() {
        // We should return undefined if vgMedia still doesn't exist
        // tslint:disable-next-line:no-unnecessary-initializer
        /** @type {?} */
        let result = undefined;
        if (this.vgMedia) {
            result = this.vgMedia.id;
        }
        return result;
    }
    /**
     * @return {?}
     */
    get duration() {
        return this.vgMedia.duration;
    }
    /**
     * @param {?} seconds
     * @return {?}
     */
    set currentTime(seconds) {
        this.vgMedia.currentTime = seconds;
        // this.elem.dispatchEvent(new CustomEvent(VgEvents.VG_SEEK));
    }
    /**
     * @return {?}
     */
    get currentTime() {
        return this.vgMedia.currentTime;
    }
    /**
     * @param {?} volume
     * @return {?}
     */
    set volume(volume) {
        this.vgMedia.volume = volume;
    }
    /**
     * @return {?}
     */
    get volume() {
        return this.vgMedia.volume;
    }
    /**
     * @param {?} rate
     * @return {?}
     */
    set playbackRate(rate) {
        this.vgMedia.playbackRate = rate;
    }
    /**
     * @return {?}
     */
    get playbackRate() {
        return this.vgMedia.playbackRate;
    }
    /**
     * @return {?}
     */
    get buffered() {
        return this.vgMedia.buffered;
    }
    /**
     * @return {?}
     */
    get textTracks() {
        return this.vgMedia.textTracks;
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onCanPlay(event) {
        this.isBufferDetected = false;
        this.bufferDetected.next(this.isBufferDetected);
        this.canPlay = true;
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onCanPlayThrough(event) {
        this.isBufferDetected = false;
        this.bufferDetected.next(this.isBufferDetected);
        this.canPlayThrough = true;
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onLoadMetadata(event) {
        this.isMetadataLoaded = true;
        this.time = {
            current: 0,
            left: 0,
            total: this.duration * 1000
        };
        this.state = VgStates.VG_PAUSED;
        // Live streaming check
        /** @type {?} */
        const t = Math.round(this.time.total);
        this.isLive = (t === Infinity);
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onWait(event) {
        this.isWaiting = true;
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onComplete(event) {
        this.isCompleted = true;
        this.state = VgStates.VG_ENDED;
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onStartPlaying(event) {
        this.state = VgStates.VG_PLAYING;
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onPlay(event) {
        this.state = VgStates.VG_PLAYING;
        if (this.vgMaster) {
            if (!this.syncSubscription || this.syncSubscription.closed) {
                this.startSync();
            }
        }
        this.startBufferCheck();
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onPause(event) {
        this.state = VgStates.VG_PAUSED;
        if (this.vgMaster) {
            if (!this.playAtferSync) {
                this.syncSubscription.unsubscribe();
            }
        }
        this.stopBufferCheck();
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onTimeUpdate(event) {
        /** @type {?} */
        const end = this.buffered.length - 1;
        this.time = {
            current: this.currentTime * 1000,
            total: this.time.total,
            left: (this.duration - this.currentTime) * 1000
        };
        if (end >= 0) {
            this.buffer = { end: this.buffered.end(end) * 1000 };
        }
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onProgress(event) {
        /** @type {?} */
        const end = this.buffered.length - 1;
        if (end >= 0) {
            this.buffer = { end: this.buffered.end(end) * 1000 };
        }
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onVolumeChange(event) {
        // TODO: Save to localstorage the current volume
        this.ref.detectChanges();
    }
    // @ts-ignore
    /**
     * @param {?} event
     * @return {?}
     */
    onError(event) {
        // TODO: Handle error messages
        this.ref.detectChanges();
    }
    // http://stackoverflow.com/a/23828241/779529
    /**
     * @return {?}
     */
    bufferCheck() {
        /** @type {?} */
        const offset = 1 / this.checkInterval;
        this.currentPlayPos = this.currentTime;
        if (!this.isBufferDetected && this.currentPlayPos < (this.lastPlayPos + offset)) {
            this.isBufferDetected = true;
        }
        if (this.isBufferDetected && this.currentPlayPos > (this.lastPlayPos + offset)) {
            this.isBufferDetected = false;
        }
        // Prevent calls to bufferCheck after ngOnDestroy have been called
        if (!this.bufferDetected.closed) {
            this.bufferDetected.next(this.isBufferDetected);
        }
        this.lastPlayPos = this.currentPlayPos;
    }
    /**
     * @return {?}
     */
    startBufferCheck() {
        this.checkBufferSubscription = timer(0, this.checkInterval).subscribe((/**
         * @return {?}
         */
        () => {
            this.bufferCheck();
        }));
    }
    /**
     * @return {?}
     */
    stopBufferCheck() {
        if (this.checkBufferSubscription) {
            this.checkBufferSubscription.unsubscribe();
        }
        this.isBufferDetected = false;
        this.bufferDetected.next(this.isBufferDetected);
    }
    /**
     * @param {?} value
     * @param {?=} byPercent
     * @return {?}
     */
    seekTime(value, byPercent = false) {
        /** @type {?} */
        let second;
        /** @type {?} */
        const duration = this.duration;
        if (byPercent) {
            second = value * duration / 100;
        }
        else {
            second = value;
        }
        this.currentTime = second;
    }
    /**
     * @param {?} type
     * @param {?=} label
     * @param {?=} language
     * @param {?=} mode
     * @return {?}
     */
    addTextTrack(type, label, language, mode) {
        /** @type {?} */
        const newTrack = this.vgMedia.addTextTrack(type, label, language);
        if (mode) {
            newTrack.mode = mode;
        }
        return newTrack;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.vgMedia.src = '';
        this.mutationObs.unsubscribe();
        this.canPlayObs.unsubscribe();
        this.canPlayThroughObs.unsubscribe();
        this.loadedMetadataObs.unsubscribe();
        this.waitingObs.unsubscribe();
        this.progressObs.unsubscribe();
        this.endedObs.unsubscribe();
        this.playingObs.unsubscribe();
        this.playObs.unsubscribe();
        this.pauseObs.unsubscribe();
        this.timeUpdateObs.unsubscribe();
        this.volumeChangeObs.unsubscribe();
        this.errorObs.unsubscribe();
        if (this.checkBufferSubscription) {
            this.checkBufferSubscription.unsubscribe();
        }
        if (this.syncSubscription) {
            this.syncSubscription.unsubscribe();
        }
        this.bufferDetected.complete();
        this.bufferDetected.unsubscribe();
        this.api.unregisterMedia(this);
    }
}
VgMedia.decorators = [
    { type: Directive, args: [{
                selector: '[vgMedia]'
            },] }
];
/** @nocollapse */
VgMedia.ctorParameters = () => [
    { type: VgAPI },
    { type: ChangeDetectorRef }
];
VgMedia.propDecorators = {
    vgMedia: [{ type: Input }],
    vgMaster: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgMedia.prototype.elem;
    /** @type {?} */
    VgMedia.prototype.vgMedia;
    /** @type {?} */
    VgMedia.prototype.vgMaster;
    /** @type {?} */
    VgMedia.prototype.state;
    /** @type {?} */
    VgMedia.prototype.time;
    /** @type {?} */
    VgMedia.prototype.buffer;
    /** @type {?} */
    VgMedia.prototype.track;
    /** @type {?} */
    VgMedia.prototype.subscriptions;
    /** @type {?} */
    VgMedia.prototype.canPlay;
    /** @type {?} */
    VgMedia.prototype.canPlayThrough;
    /** @type {?} */
    VgMedia.prototype.isMetadataLoaded;
    /** @type {?} */
    VgMedia.prototype.isWaiting;
    /** @type {?} */
    VgMedia.prototype.isCompleted;
    /** @type {?} */
    VgMedia.prototype.isLive;
    /** @type {?} */
    VgMedia.prototype.isBufferDetected;
    /** @type {?} */
    VgMedia.prototype.checkInterval;
    /** @type {?} */
    VgMedia.prototype.currentPlayPos;
    /** @type {?} */
    VgMedia.prototype.lastPlayPos;
    /** @type {?} */
    VgMedia.prototype.checkBufferSubscription;
    /** @type {?} */
    VgMedia.prototype.syncSubscription;
    /** @type {?} */
    VgMedia.prototype.canPlayAllSubscription;
    /** @type {?} */
    VgMedia.prototype.playAtferSync;
    /** @type {?} */
    VgMedia.prototype.mutationObs;
    /** @type {?} */
    VgMedia.prototype.canPlayObs;
    /** @type {?} */
    VgMedia.prototype.canPlayThroughObs;
    /** @type {?} */
    VgMedia.prototype.loadedMetadataObs;
    /** @type {?} */
    VgMedia.prototype.waitingObs;
    /** @type {?} */
    VgMedia.prototype.progressObs;
    /** @type {?} */
    VgMedia.prototype.endedObs;
    /** @type {?} */
    VgMedia.prototype.playingObs;
    /** @type {?} */
    VgMedia.prototype.playObs;
    /** @type {?} */
    VgMedia.prototype.pauseObs;
    /** @type {?} */
    VgMedia.prototype.timeUpdateObs;
    /** @type {?} */
    VgMedia.prototype.volumeChangeObs;
    /** @type {?} */
    VgMedia.prototype.errorObs;
    /** @type {?} */
    VgMedia.prototype.bufferDetected;
    /** @type {?} */
    VgMedia.prototype.playPromise;
    /**
     * @type {?}
     * @private
     */
    VgMedia.prototype.api;
    /**
     * @type {?}
     * @private
     */
    VgMedia.prototype.ref;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-cue-points/vg-cue-points.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:directive-class-suffix
class VgCuePoints {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        // tslint:disable:no-output-on-prefix
        this.onEnterCuePoint = new EventEmitter();
        this.onUpdateCuePoint = new EventEmitter();
        this.onExitCuePoint = new EventEmitter();
        this.onCompleteCuePoint = new EventEmitter();
        this.subscriptions = [];
        this.cuesSubscriptions = [];
        this.totalCues = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onLoad$ = fromEvent(this.ref.nativeElement, VgEvents.VG_LOAD);
        this.subscriptions.push(this.onLoad$.subscribe(this.onLoad.bind(this)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onLoad(event) {
        if (event.target && event.target.track) {
            /** @type {?} */
            const cues = event.target.track.cues;
            this.ref.nativeElement.cues = cues;
            this.updateCuePoints(cues);
        }
        else if (event.target && event.target.textTracks && event.target.textTracks.length) {
            /** @type {?} */
            const cues = event.target.textTracks[0].cues;
            this.ref.nativeElement.cues = cues;
            this.updateCuePoints(cues);
        }
    }
    /**
     * @param {?} cues
     * @return {?}
     */
    updateCuePoints(cues) {
        this.cuesSubscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
        for (let i = 0, l = cues.length; i < l; i++) {
            this.onEnter$ = fromEvent(cues[i], VgEvents.VG_ENTER);
            this.cuesSubscriptions.push(this.onEnter$.subscribe(this.onEnter.bind(this)));
            this.onExit$ = fromEvent(cues[i], VgEvents.VG_EXIT);
            this.cuesSubscriptions.push(this.onExit$.subscribe(this.onExit.bind(this)));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnter(event) {
        this.onEnterCuePoint.emit(event.target);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onExit(event) {
        this.onExitCuePoint.emit(event.target);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.ref.nativeElement.track && this.ref.nativeElement.track.cues) {
            /** @type {?} */
            const changes = this.totalCues !== this.ref.nativeElement.track.cues.length;
            if (changes) {
                this.totalCues = this.ref.nativeElement.track.cues.length;
                this.ref.nativeElement.cues = this.ref.nativeElement.track.cues;
                this.updateCuePoints(this.ref.nativeElement.track.cues);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgCuePoints.decorators = [
    { type: Directive, args: [{
                selector: '[vgCuePoints]'
            },] }
];
/** @nocollapse */
VgCuePoints.ctorParameters = () => [
    { type: ElementRef }
];
VgCuePoints.propDecorators = {
    onEnterCuePoint: [{ type: Output }],
    onUpdateCuePoint: [{ type: Output }],
    onExitCuePoint: [{ type: Output }],
    onCompleteCuePoint: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    VgCuePoints.prototype.onEnterCuePoint;
    /** @type {?} */
    VgCuePoints.prototype.onUpdateCuePoint;
    /** @type {?} */
    VgCuePoints.prototype.onExitCuePoint;
    /** @type {?} */
    VgCuePoints.prototype.onCompleteCuePoint;
    /** @type {?} */
    VgCuePoints.prototype.subscriptions;
    /** @type {?} */
    VgCuePoints.prototype.cuesSubscriptions;
    /** @type {?} */
    VgCuePoints.prototype.onLoad$;
    /** @type {?} */
    VgCuePoints.prototype.onEnter$;
    /** @type {?} */
    VgCuePoints.prototype.onExit$;
    /** @type {?} */
    VgCuePoints.prototype.totalCues;
    /** @type {?} */
    VgCuePoints.prototype.ref;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-player/vg-player.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
// tslint:disable:no-output-on-prefix
class VgPlayer {
    /**
     * @param {?} ref
     * @param {?} api
     * @param {?} fsAPI
     * @param {?} controlsHidden
     */
    constructor(ref, api, fsAPI, controlsHidden) {
        this.api = api;
        this.fsAPI = fsAPI;
        this.controlsHidden = controlsHidden;
        this.isFullscreen = false;
        this.isNativeFullscreen = false;
        this.areControlsHidden = false;
        this.onPlayerReady = new EventEmitter();
        this.onMediaReady = new EventEmitter();
        this.subscriptions = [];
        this.elem = ref.nativeElement;
        this.api.registerElement(this.elem);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.medias.toArray().forEach((/**
         * @param {?} media
         * @return {?}
         */
        (media) => {
            this.api.registerMedia(media);
        }));
        this.fsAPI.init(this.elem, this.medias);
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));
        this.api.onPlayerReady(this.fsAPI);
        this.onPlayerReady.emit(this.api);
    }
    /**
     * @param {?} fsState
     * @return {?}
     */
    onChangeFullscreen(fsState) {
        if (!this.fsAPI.nativeFullscreen) {
            this.isFullscreen = fsState;
            this.zIndex = fsState ? VgUtils.getZIndex().toString() : 'auto';
        }
        else {
            this.isNativeFullscreen = fsState;
        }
    }
    /**
     * @param {?} hidden
     * @return {?}
     */
    onHideControls(hidden) {
        this.areControlsHidden = hidden;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgPlayer.decorators = [
    { type: Component, args: [{
                selector: 'vg-player',
                encapsulation: ViewEncapsulation.None,
                template: `<ng-content></ng-content>`,
                providers: [VgAPI, VgFullscreenAPI, VgControlsHidden],
                styles: [`
        vg-player {
            font-family: 'videogular';
            position: relative;
            display: flex;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: black;
        }
        vg-player.fullscreen {
            position: fixed;
            left: 0;
            top: 0;
        }
        vg-player.native-fullscreen.controls-hidden {
            cursor: none;
        }
    `]
            }] }
];
/** @nocollapse */
VgPlayer.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI },
    { type: VgFullscreenAPI },
    { type: VgControlsHidden }
];
VgPlayer.propDecorators = {
    isFullscreen: [{ type: HostBinding, args: ['class.fullscreen',] }],
    isNativeFullscreen: [{ type: HostBinding, args: ['class.native-fullscreen',] }],
    areControlsHidden: [{ type: HostBinding, args: ['class.controls-hidden',] }],
    zIndex: [{ type: HostBinding, args: ['style.z-index',] }],
    onPlayerReady: [{ type: Output }],
    onMediaReady: [{ type: Output }],
    medias: [{ type: ContentChildren, args: [VgMedia,] }]
};
if (false) {
    /** @type {?} */
    VgPlayer.prototype.elem;
    /** @type {?} */
    VgPlayer.prototype.isFullscreen;
    /** @type {?} */
    VgPlayer.prototype.isNativeFullscreen;
    /** @type {?} */
    VgPlayer.prototype.areControlsHidden;
    /** @type {?} */
    VgPlayer.prototype.zIndex;
    /** @type {?} */
    VgPlayer.prototype.onPlayerReady;
    /** @type {?} */
    VgPlayer.prototype.onMediaReady;
    /** @type {?} */
    VgPlayer.prototype.medias;
    /** @type {?} */
    VgPlayer.prototype.subscriptions;
    /** @type {?} */
    VgPlayer.prototype.api;
    /** @type {?} */
    VgPlayer.prototype.fsAPI;
    /**
     * @type {?}
     * @private
     */
    VgPlayer.prototype.controlsHidden;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-media/i-media-element.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IMediaElement() { }
if (false) {
    /**
     * Returns the id of the element.
     * @type {?}
     */
    IMediaElement.prototype.id;
    /**
     * Returns the node name. Only available on native HTML tags.
     * @type {?|undefined}
     */
    IMediaElement.prototype.nodeName;
    /**
     * Returns the node element. Only available on Angular classes.
     * @type {?|undefined}
     */
    IMediaElement.prototype.elem;
    /**
     * Returns an AudioTrackList object with the audio tracks for a given video element.
     * @type {?}
     */
    IMediaElement.prototype.audioTracks;
    /**
     * Gets or sets a value that indicates whether to start playing the media automatically.
     * @type {?}
     */
    IMediaElement.prototype.autoplay;
    /**
     * Gets a collection of buffered time ranges.
     * @type {?}
     */
    IMediaElement.prototype.buffered;
    /**
     * Gets or sets a flag that indicates whether the client provides a set of controls for
     * the media (in case the developer does not include controls for the player).
     * @type {?}
     */
    IMediaElement.prototype.controls;
    /** @type {?} */
    IMediaElement.prototype.crossOrigin;
    /**
     * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.
     * @type {?}
     */
    IMediaElement.prototype.currentSrc;
    /**
     * Gets or sets the current playback position, in seconds.
     * @type {?}
     */
    IMediaElement.prototype.currentTime;
    /** @type {?} */
    IMediaElement.prototype.defaultMuted;
    /**
     * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
     * @type {?}
     */
    IMediaElement.prototype.defaultPlaybackRate;
    /**
     * Returns the duration in seconds of the current media resource. A NaN value is returned if duration
     * is not available, or Infinity if the media resource is streaming.
     * @type {?}
     */
    IMediaElement.prototype.duration;
    /**
     * Gets information about whether the playback has ended or not.
     * @type {?}
     */
    IMediaElement.prototype.ended;
    /**
     * Returns an object representing the current error state of the audio or video element.
     * @type {?}
     */
    IMediaElement.prototype.error;
    /**
     * Gets or sets a flag to specify whether playback should restart after it completes.
     * @type {?}
     */
    IMediaElement.prototype.loop;
    /** @type {?} */
    IMediaElement.prototype.mediaKeys;
    /**
     * Specifies the purpose of the audio or video media, such as background audio or alerts.
     * @type {?}
     */
    IMediaElement.prototype.msAudioCategory;
    /**
     * Specifies the output device id that the audio will be sent to.
     * @type {?}
     */
    IMediaElement.prototype.msAudioDeviceType;
    /** @type {?} */
    IMediaElement.prototype.msGraphicsTrustStatus;
    /**
     * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.
     * @type {?}
     */
    IMediaElement.prototype.msKeys;
    /**
     * Gets or sets whether the DLNA PlayTo device is available.
     * @type {?}
     */
    IMediaElement.prototype.msPlayToDisabled;
    /**
     * Gets or sets the path to the preferred media source. This enables the Play To target device to
     * stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
     * @type {?}
     */
    IMediaElement.prototype.msPlayToPreferredSourceUri;
    /**
     * Gets or sets the primary DLNA PlayTo device.
     * @type {?}
     */
    IMediaElement.prototype.msPlayToPrimary;
    /**
     * Gets the source associated with the media element for use by the PlayToManager.
     * @type {?}
     */
    IMediaElement.prototype.msPlayToSource;
    /**
     * Specifies whether or not to enable low-latency playback on the media element.
     * @type {?}
     */
    IMediaElement.prototype.msRealTime;
    /**
     * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
     * @type {?}
     */
    IMediaElement.prototype.muted;
    /**
     * Gets the current network activity for the element.
     * @type {?}
     */
    IMediaElement.prototype.networkState;
    /** @type {?} */
    IMediaElement.prototype.onencrypted;
    /** @type {?} */
    IMediaElement.prototype.onmsneedkey;
    /**
     * Gets a flag that specifies whether playback is paused.
     * @type {?}
     */
    IMediaElement.prototype.paused;
    /**
     * Gets or sets the current rate of speed for the media resource to play. This speed is
     * expressed as a multiple of the normal speed of the media resource.
     * @type {?}
     */
    IMediaElement.prototype.playbackRate;
    /**
     * Gets TimeRanges for the current media resource that has been played.
     * @type {?}
     */
    IMediaElement.prototype.played;
    /**
     * Gets or sets the current playback position, in seconds.
     * @type {?}
     */
    IMediaElement.prototype.preload;
    /** @type {?} */
    IMediaElement.prototype.readyState;
    /**
     * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.
     * @type {?}
     */
    IMediaElement.prototype.seekable;
    /**
     * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.
     * @type {?}
     */
    IMediaElement.prototype.seeking;
    /**
     * The address or URL of the a media resource that is to be considered.
     * @type {?}
     */
    IMediaElement.prototype.src;
    /** @type {?} */
    IMediaElement.prototype.srcObject;
    /** @type {?} */
    IMediaElement.prototype.textTracks;
    /** @type {?} */
    IMediaElement.prototype.videoTracks;
    /**
     * Gets or sets the volume level for audio portions of the media element.
     * @type {?}
     */
    IMediaElement.prototype.volume;
    /** @type {?} */
    IMediaElement.prototype.HAVE_CURRENT_DATA;
    /** @type {?} */
    IMediaElement.prototype.HAVE_ENOUGH_DATA;
    /** @type {?} */
    IMediaElement.prototype.HAVE_FUTURE_DATA;
    /** @type {?} */
    IMediaElement.prototype.HAVE_METADATA;
    /** @type {?} */
    IMediaElement.prototype.HAVE_NOTHING;
    /** @type {?} */
    IMediaElement.prototype.NETWORK_EMPTY;
    /** @type {?} */
    IMediaElement.prototype.NETWORK_IDLE;
    /** @type {?} */
    IMediaElement.prototype.NETWORK_LOADING;
    /** @type {?} */
    IMediaElement.prototype.NETWORK_NO_SOURCE;
    /**
     * @param {?} kind
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    IMediaElement.prototype.addTextTrack = function (kind, label, language) { };
    /**
     * Returns a string that specifies whether the client can play a given media resource type.
     * @param {?} type
     * @return {?}
     */
    IMediaElement.prototype.canPlayType = function (type) { };
    /**
     * Resets the audio or video object and loads a new media resource.
     * @return {?}
     */
    IMediaElement.prototype.load = function () { };
    /**
     * Clears all effects from the media pipeline.
     * @return {?}
     */
    IMediaElement.prototype.msClearEffects = function () { };
    /**
     * @return {?}
     */
    IMediaElement.prototype.msGetAsCastingSource = function () { };
    /**
     * Inserts the specified audio effect into media pipeline.
     * @param {?} activatableClassId
     * @param {?} effectRequired
     * @param {?=} config
     * @return {?}
     */
    IMediaElement.prototype.msInsertAudioEffect = function (activatableClassId, effectRequired, config) { };
    /**
     * @param {?} mediaKeys
     * @return {?}
     */
    IMediaElement.prototype.msSetMediaKeys = function (mediaKeys) { };
    /**
     * Specifies the media protection manager for a given media pipeline.
     * @param {?=} mediaProtectionManager
     * @return {?}
     */
    IMediaElement.prototype.msSetMediaProtectionManager = function (mediaProtectionManager) { };
    /**
     * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is
     * playing or paused. You can also use the pause or play events to tell whether the media is playing or not.
     * @return {?}
     */
    IMediaElement.prototype.pause = function () { };
    /**
     * Loads and starts playback of a media resource.
     * @return {?}
     */
    IMediaElement.prototype.play = function () { };
    /**
     * @param {?} mediaKeys
     * @return {?}
     */
    IMediaElement.prototype.setMediaKeys = function (mediaKeys) { };
    /**
     * @param {?} type
     * @param {?} listener
     * @param {?=} useCapture
     * @return {?}
     */
    IMediaElement.prototype.addEventListener = function (type, listener, useCapture) { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-media/i-playable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IPlayable() { }
if (false) {
    /** @type {?} */
    IPlayable.prototype.id;
    /** @type {?} */
    IPlayable.prototype.elem;
    /** @type {?} */
    IPlayable.prototype.time;
    /** @type {?} */
    IPlayable.prototype.buffer;
    /** @type {?|undefined} */
    IPlayable.prototype.track;
    /** @type {?} */
    IPlayable.prototype.canPlay;
    /** @type {?} */
    IPlayable.prototype.canPlayThrough;
    /** @type {?} */
    IPlayable.prototype.isMetadataLoaded;
    /** @type {?} */
    IPlayable.prototype.isWaiting;
    /** @type {?} */
    IPlayable.prototype.isCompleted;
    /** @type {?} */
    IPlayable.prototype.isLive;
    /** @type {?} */
    IPlayable.prototype.textTracks;
    /** @type {?} */
    IPlayable.prototype.state;
    /** @type {?} */
    IPlayable.prototype.subscriptions;
    /** @type {?} */
    IPlayable.prototype.duration;
    /** @type {?} */
    IPlayable.prototype.currentTime;
    /** @type {?} */
    IPlayable.prototype.play;
    /** @type {?} */
    IPlayable.prototype.pause;
    /** @type {?|undefined} */
    IPlayable.prototype.addTextTrack;
    /** @type {?|undefined} */
    IPlayable.prototype.dispatchEvent;
}
/**
 * @record
 */
function IMediaSubscriptions() { }
if (false) {
    /** @type {?} */
    IMediaSubscriptions.prototype.abort;
    /** @type {?} */
    IMediaSubscriptions.prototype.bufferDetected;
    /** @type {?} */
    IMediaSubscriptions.prototype.canPlay;
    /** @type {?} */
    IMediaSubscriptions.prototype.canPlayThrough;
    /** @type {?} */
    IMediaSubscriptions.prototype.durationChange;
    /** @type {?} */
    IMediaSubscriptions.prototype.emptied;
    /** @type {?} */
    IMediaSubscriptions.prototype.encrypted;
    /** @type {?} */
    IMediaSubscriptions.prototype.ended;
    /** @type {?} */
    IMediaSubscriptions.prototype.error;
    /** @type {?} */
    IMediaSubscriptions.prototype.loadedData;
    /** @type {?} */
    IMediaSubscriptions.prototype.loadedMetadata;
    /** @type {?} */
    IMediaSubscriptions.prototype.loadStart;
    /** @type {?} */
    IMediaSubscriptions.prototype.pause;
    /** @type {?} */
    IMediaSubscriptions.prototype.play;
    /** @type {?} */
    IMediaSubscriptions.prototype.playing;
    /** @type {?} */
    IMediaSubscriptions.prototype.progress;
    /** @type {?} */
    IMediaSubscriptions.prototype.rateChange;
    /** @type {?} */
    IMediaSubscriptions.prototype.seeked;
    /** @type {?} */
    IMediaSubscriptions.prototype.seeking;
    /** @type {?} */
    IMediaSubscriptions.prototype.stalled;
    /** @type {?} */
    IMediaSubscriptions.prototype.suspend;
    /** @type {?} */
    IMediaSubscriptions.prototype.timeUpdate;
    /** @type {?} */
    IMediaSubscriptions.prototype.volumeChange;
    /** @type {?} */
    IMediaSubscriptions.prototype.waiting;
    /** @type {?} */
    IMediaSubscriptions.prototype.startAds;
    /** @type {?} */
    IMediaSubscriptions.prototype.endAds;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-media/vg-media-element.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgMediaElement {
    /**
     * @return {?}
     */
    get audioTracks() { return null; }
    // @ts-ignore
    /**
     * @param {?} kind
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    addTextTrack(kind, label, language) {
        return null;
    }
    // @ts-ignore
    /**
     * @param {?} type
     * @return {?}
     */
    canPlayType(type) {
        return null;
    }
    /**
     * @return {?}
     */
    load() {
    }
    /**
     * @return {?}
     */
    msClearEffects() {
    }
    /**
     * @return {?}
     */
    msGetAsCastingSource() {
        return null;
    }
    // @ts-ignore
    /**
     * @param {?} activatableClassId
     * @param {?} effectRequired
     * @param {?=} config
     * @return {?}
     */
    msInsertAudioEffect(activatableClassId, effectRequired, config) {
    }
    // @ts-ignore
    /**
     * @param {?} mediaKeys
     * @return {?}
     */
    msSetMediaKeys(mediaKeys) {
    }
    // @ts-ignore
    /**
     * @param {?=} mediaProtectionManager
     * @return {?}
     */
    msSetMediaProtectionManager(mediaProtectionManager) {
    }
    /**
     * @return {?}
     */
    pause() {
    }
    /**
     * @return {?}
     */
    play() {
        return null;
    }
    // @ts-ignore
    /**
     * @param {?} mediaKeys
     * @return {?}
     */
    setMediaKeys(mediaKeys) {
        return null;
    }
    // @ts-ignore
    /**
     * @param {?} type
     * @param {?} listener
     * @param {?=} useCapture
     * @return {?}
     */
    addEventListener(type, listener, useCapture) {
    }
}
if (false) {
    /** @type {?} */
    VgMediaElement.prototype.id;
    /** @type {?} */
    VgMediaElement.prototype.elem;
    /** @type {?} */
    VgMediaElement.prototype.autoplay;
    /** @type {?} */
    VgMediaElement.prototype.buffered;
    /** @type {?} */
    VgMediaElement.prototype.controls;
    /** @type {?} */
    VgMediaElement.prototype.crossOrigin;
    /** @type {?} */
    VgMediaElement.prototype.currentSrc;
    /** @type {?} */
    VgMediaElement.prototype.currentTime;
    /** @type {?} */
    VgMediaElement.prototype.defaultMuted;
    /** @type {?} */
    VgMediaElement.prototype.defaultPlaybackRate;
    /** @type {?} */
    VgMediaElement.prototype.duration;
    /** @type {?} */
    VgMediaElement.prototype.ended;
    /** @type {?} */
    VgMediaElement.prototype.error;
    /** @type {?} */
    VgMediaElement.prototype.loop;
    /** @type {?} */
    VgMediaElement.prototype.mediaKeys;
    /** @type {?} */
    VgMediaElement.prototype.msAudioCategory;
    /** @type {?} */
    VgMediaElement.prototype.msAudioDeviceType;
    /** @type {?} */
    VgMediaElement.prototype.msGraphicsTrustStatus;
    /** @type {?} */
    VgMediaElement.prototype.msKeys;
    /** @type {?} */
    VgMediaElement.prototype.msPlayToDisabled;
    /** @type {?} */
    VgMediaElement.prototype.msPlayToPreferredSourceUri;
    /** @type {?} */
    VgMediaElement.prototype.msPlayToPrimary;
    /** @type {?} */
    VgMediaElement.prototype.msPlayToSource;
    /** @type {?} */
    VgMediaElement.prototype.msRealTime;
    /** @type {?} */
    VgMediaElement.prototype.muted;
    /** @type {?} */
    VgMediaElement.prototype.networkState;
    /** @type {?} */
    VgMediaElement.prototype.onencrypted;
    /** @type {?} */
    VgMediaElement.prototype.onmsneedkey;
    /** @type {?} */
    VgMediaElement.prototype.paused;
    /** @type {?} */
    VgMediaElement.prototype.playbackRate;
    /** @type {?} */
    VgMediaElement.prototype.played;
    /** @type {?} */
    VgMediaElement.prototype.preload;
    /** @type {?} */
    VgMediaElement.prototype.readyState;
    /** @type {?} */
    VgMediaElement.prototype.seekable;
    /** @type {?} */
    VgMediaElement.prototype.seeking;
    /** @type {?} */
    VgMediaElement.prototype.src;
    /** @type {?} */
    VgMediaElement.prototype.srcObject;
    /** @type {?} */
    VgMediaElement.prototype.textTracks;
    /** @type {?} */
    VgMediaElement.prototype.videoTracks;
    /** @type {?} */
    VgMediaElement.prototype.volume;
    /** @type {?} */
    VgMediaElement.prototype.HAVE_CURRENT_DATA;
    /** @type {?} */
    VgMediaElement.prototype.HAVE_ENOUGH_DATA;
    /** @type {?} */
    VgMediaElement.prototype.HAVE_FUTURE_DATA;
    /** @type {?} */
    VgMediaElement.prototype.HAVE_METADATA;
    /** @type {?} */
    VgMediaElement.prototype.HAVE_NOTHING;
    /** @type {?} */
    VgMediaElement.prototype.NETWORK_EMPTY;
    /** @type {?} */
    VgMediaElement.prototype.NETWORK_IDLE;
    /** @type {?} */
    VgMediaElement.prototype.NETWORK_LOADING;
    /** @type {?} */
    VgMediaElement.prototype.NETWORK_NO_SOURCE;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-core.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function BitrateOption() { }
if (false) {
    /** @type {?} */
    BitrateOption.prototype.qualityIndex;
    /** @type {?} */
    BitrateOption.prototype.width;
    /** @type {?} */
    BitrateOption.prototype.height;
    /** @type {?} */
    BitrateOption.prototype.bitrate;
    /** @type {?} */
    BitrateOption.prototype.mediaType;
    /** @type {?|undefined} */
    BitrateOption.prototype.label;
}
class VgCoreModule {
}
VgCoreModule.decorators = [
    { type: NgModule, args: [{
                declarations: [VgMedia, VgCuePoints, VgPlayer],
                exports: [VgMedia, VgCuePoints, VgPlayer],
                providers: [VgAPI, VgFullscreenAPI, VgUtils, VgControlsHidden, VgStates, VgEvents]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ima-ads/vg-ima-ads.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:no-output-on-prefix
// tslint:disable:ban-types
// tslint:disable:component-class-suffix
class VgImaAds {
    /**
     * @param {?} ref
     * @param {?} API
     * @param {?} fsAPI
     */
    constructor(ref, API, fsAPI) {
        this.API = API;
        this.fsAPI = fsAPI;
        this.onAdStart = new EventEmitter();
        this.onAdStop = new EventEmitter();
        this.onSkipAd = new EventEmitter();
        this.isFullscreen = false;
        this.subscriptions = [];
        this.displayState = 'none';
        this.elem = ref.nativeElement;
        this.onContentEnded = this.onContentEnded.bind(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        if (typeof google === 'undefined') {
            this.onMissingGoogleImaLoader();
            return;
        }
        this.target = this.API.getMediaById(this.vgFor);
        this.initializations();
        this.subscriptions.push(this.target.subscriptions.ended.subscribe(this.onContentEnded.bind(this)));
        this.subscriptions.push(this.target.subscriptions.play.subscribe(this.onUpdateState.bind(this)));
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
        this.ima.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);
        this.ima.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this), false);
        this.loadAds();
    }
    /**
     * @return {?}
     */
    initializations() {
        this.ima = new Ima(this.elem);
        if (this.vgSkipButton) {
            this.skipButton = (/** @type {?} */ (document.querySelector(this.vgSkipButton)));
            this.skipButton.style.display = 'none';
            this.skipButton.addEventListener('click', this.onClickSkip.bind(this));
            this.elem.insertBefore(this.skipButton, this.elem.firstChild);
        }
        window.addEventListener('resize', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const w = this.API.videogularElement.offsetWidth;
            /** @type {?} */
            const h = this.API.videogularElement.offsetHeight;
            if (this.ima.adsManager) {
                if (this.isFullscreen) {
                    this.ima.adsManager.resize(w, h, google.ima.ViewMode.FULLSCREEN);
                }
                else {
                    this.ima.adsManager.resize(w, h, google.ima.ViewMode.NORMAL);
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    loadAds() {
        if (this.vgCompanion) {
            googletag.cmd.push((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const adUnitPath = '/' + this.vgNetwork + '/' + this.vgUnitPath;
                /** @type {?} */
                const slot = googletag.defineSlot(adUnitPath, this.vgCompanionSize, this.vgCompanion);
                if (slot) {
                    slot.addService(googletag.companionAds());
                    slot.addService(googletag.pubads());
                    googletag
                        .companionAds()
                        .setRefreshUnfilledSlots(true);
                    googletag
                        .pubads()
                        .enableVideoAds();
                    googletag.enableServices();
                }
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onUpdateState(event) {
        switch (event.type) {
            case VgEvents.VG_PLAY:
                if (!this.ima.adsLoaded) {
                    this.API.pause();
                    this.ima.adDisplayContainer.initialize();
                    this.requestAds(this.vgAdTagUrl);
                    this.ima.adsLoaded = true;
                }
                break;
        }
    }
    /**
     * @param {?} adTagUrl
     * @return {?}
     */
    requestAds(adTagUrl) {
        // Show only to get computed style in pixels
        this.show();
        /** @type {?} */
        const adsRequest = new google.ima.AdsRequest();
        /** @type {?} */
        const computedStyle = window.getComputedStyle(this.elem);
        adsRequest.adTagUrl = adTagUrl;
        adsRequest.linearAdSlotWidth = parseInt(computedStyle.width, 10);
        adsRequest.linearAdSlotHeight = parseInt(computedStyle.height, 10);
        adsRequest.nonLinearAdSlotWidth = parseInt(computedStyle.width, 10);
        adsRequest.nonLinearAdSlotHeight = parseInt(computedStyle.height, 10);
        this.ima.adsLoader.requestAds(adsRequest);
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onAdsManagerLoaded(evt) {
        this.show();
        this.ima.adsManager = evt.getAdsManager(this.target);
        this.processAdsManager(this.ima.adsManager);
    }
    // @ts-ignore
    /**
     * @param {?} adsManager
     * @return {?}
     */
    processAdsManager(adsManager) {
        /** @type {?} */
        const w = this.API.videogularElement.offsetWidth;
        /** @type {?} */
        const h = this.API.videogularElement.offsetHeight;
        // Attach the pause/resume events.
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED, this.onSkippableStateChanged.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.onAllAdsComplete.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this.onAdComplete.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this), false);
        this.ima.adsManager.init(w, h, google.ima.ViewMode.NORMAL);
        this.ima.adsManager.start();
    }
    /**
     * @return {?}
     */
    onSkippableStateChanged() {
        /** @type {?} */
        const isSkippable = this.ima.adsManager.getAdSkippableState();
        if (isSkippable) {
            this.skipButton.style.display = 'block';
        }
        else {
            this.skipButton.style.display = 'none';
        }
    }
    /**
     * @return {?}
     */
    onClickSkip() {
        this.ima.adsManager.skip();
        this.onSkipAd.emit(true);
    }
    /**
     * @return {?}
     */
    onContentPauseRequested() {
        this.show();
        this.API.pause();
        this.onAdStop.emit(true);
    }
    /**
     * @return {?}
     */
    onContentResumeRequested() {
        this.API.play();
        this.onAdStart.emit(true);
        this.hide();
    }
    // @ts-ignore
    /**
     * @param {?} evt
     * @return {?}
     */
    onAdError(evt) {
        if (this.ima.adsManager) {
            this.ima.adsManager.destroy();
        }
        this.hide();
        this.API.play();
        this.onAdStop.emit(true);
    }
    /**
     * @return {?}
     */
    onAllAdsComplete() {
        this.hide();
        // The last ad was a post-roll
        if (this.ima.adsManager.getCuePoints().join().indexOf('-1') >= 0) {
            this.API.pause(); // it was stop() in Videogular v1
            this.onAdStop.emit(true);
        }
    }
    /**
     * @return {?}
     */
    onAdComplete() {
        // TODO: Update view with current ad count
        this.ima.currentAd++;
        this.onAdStop.emit(true);
    }
    /**
     * @return {?}
     */
    show() {
        window.dispatchEvent(new CustomEvent(VgEvents.VG_START_ADS));
        this.displayState = 'block';
    }
    /**
     * @return {?}
     */
    hide() {
        window.dispatchEvent(new CustomEvent(VgEvents.VG_END_ADS));
        this.displayState = 'none';
    }
    /**
     * @return {?}
     */
    onContentEnded() {
        this.ima.adsLoader.contentComplete();
        this.onAdStop.emit(true);
    }
    /**
     * @param {?} fsState
     * @return {?}
     */
    onChangeFullscreen(fsState) {
        if (!this.fsAPI.nativeFullscreen) {
            this.isFullscreen = fsState;
        }
    }
    /**
     * @private
     * @return {?}
     */
    onMissingGoogleImaLoader() {
        this.hide();
        this.API.play();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgImaAds.decorators = [
    { type: Component, args: [{
                selector: 'vg-ima-ads',
                encapsulation: ViewEncapsulation.None,
                template: `<div class="vg-ima-ads"></div>`,
                styles: [`
        vg-ima-ads {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 300;
        }
        vg-ima-ads .vg-ima-ads {
            position: absolute;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
    `]
            }] }
];
/** @nocollapse */
VgImaAds.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI },
    { type: VgFullscreenAPI }
];
VgImaAds.propDecorators = {
    vgFor: [{ type: Input }],
    vgNetwork: [{ type: Input }],
    vgUnitPath: [{ type: Input }],
    vgCompanion: [{ type: Input }],
    vgCompanionSize: [{ type: Input }],
    vgAdTagUrl: [{ type: Input }],
    vgSkipButton: [{ type: Input }],
    onAdStart: [{ type: Output }],
    onAdStop: [{ type: Output }],
    onSkipAd: [{ type: Output }],
    displayState: [{ type: HostBinding, args: ['style.display',] }]
};
if (false) {
    /** @type {?} */
    VgImaAds.prototype.vgFor;
    /** @type {?} */
    VgImaAds.prototype.vgNetwork;
    /** @type {?} */
    VgImaAds.prototype.vgUnitPath;
    /** @type {?} */
    VgImaAds.prototype.vgCompanion;
    /** @type {?} */
    VgImaAds.prototype.vgCompanionSize;
    /** @type {?} */
    VgImaAds.prototype.vgAdTagUrl;
    /** @type {?} */
    VgImaAds.prototype.vgSkipButton;
    /** @type {?} */
    VgImaAds.prototype.onAdStart;
    /** @type {?} */
    VgImaAds.prototype.onAdStop;
    /** @type {?} */
    VgImaAds.prototype.onSkipAd;
    /** @type {?} */
    VgImaAds.prototype.elem;
    /** @type {?} */
    VgImaAds.prototype.target;
    /** @type {?} */
    VgImaAds.prototype.ima;
    /** @type {?} */
    VgImaAds.prototype.isFullscreen;
    /** @type {?} */
    VgImaAds.prototype.skipButton;
    /** @type {?} */
    VgImaAds.prototype.subscriptions;
    /** @type {?} */
    VgImaAds.prototype.displayState;
    /** @type {?} */
    VgImaAds.prototype.API;
    /** @type {?} */
    VgImaAds.prototype.fsAPI;
}
class Ima {
    /**
     * @param {?} imaAdsElement
     */
    constructor(imaAdsElement) {
        this.adDisplayContainer = new google.ima.AdDisplayContainer(imaAdsElement);
        this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);
        this.adsManager = null;
        this.adsLoaded = false;
        this.currentAd = 0;
    }
}
if (false) {
    /** @type {?} */
    Ima.prototype.adDisplayContainer;
    /** @type {?} */
    Ima.prototype.adsLoader;
    /** @type {?} */
    Ima.prototype.adsManager;
    /** @type {?} */
    Ima.prototype.adsLoaded;
    /** @type {?} */
    Ima.prototype.currentAd;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ima-ads/ima-ads.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgImaAdsModule {
}
VgImaAdsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    VgImaAds
                ],
                exports: [
                    VgImaAds
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay-play/vg-overlay-play.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:component-class-suffix
class VgOverlayPlay {
    /**
     * @param {?} ref
     * @param {?} API
     * @param {?} fsAPI
     * @param {?} controlsHidden
     */
    constructor(ref, API, fsAPI, controlsHidden) {
        this.API = API;
        this.fsAPI = fsAPI;
        this.controlsHidden = controlsHidden;
        this.isNativeFullscreen = false;
        this.areControlsHidden = false;
        this.subscriptions = [];
        this.isBuffering = false;
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));
        this.subscriptions.push(this.target.subscriptions.bufferDetected.subscribe((/**
         * @param {?} isBuffering
         * @return {?}
         */
        isBuffering => this.onUpdateBuffer(isBuffering))));
    }
    /**
     * @param {?} isBuffering
     * @return {?}
     */
    onUpdateBuffer(isBuffering) {
        this.isBuffering = isBuffering;
    }
    /**
     * @param {?} fsState
     * @return {?}
     */
    onChangeFullscreen(fsState) {
        if (this.fsAPI.nativeFullscreen) {
            this.isNativeFullscreen = fsState;
        }
    }
    /**
     * @param {?} hidden
     * @return {?}
     */
    onHideControls(hidden) {
        this.areControlsHidden = hidden;
    }
    /**
     * @return {?}
     */
    onClick() {
        /** @type {?} */
        const state = this.getState();
        switch (state) {
            case VgStates.VG_PLAYING:
                this.target.pause();
                break;
            case VgStates.VG_PAUSED:
            case VgStates.VG_ENDED:
                this.target.play();
                break;
        }
    }
    /**
     * @return {?}
     */
    getState() {
        /** @type {?} */
        let state = VgStates.VG_PAUSED;
        if (this.target) {
            if (this.target.state instanceof Array) {
                for (let i = 0, l = this.target.state.length; i < l; i++) {
                    if (this.target.state[i] === VgStates.VG_PLAYING) {
                        state = VgStates.VG_PLAYING;
                        break;
                    }
                }
            }
            else {
                state = this.target.state;
            }
        }
        return state;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgOverlayPlay.decorators = [
    { type: Component, args: [{
                selector: 'vg-overlay-play',
                encapsulation: ViewEncapsulation.None,
                template: `<div class="vg-overlay-play"
                    [class.native-fullscreen]="isNativeFullscreen"
                    [class.controls-hidden]="areControlsHidden">
                   <div class="overlay-play-container"
                        [class.vg-icon-play_arrow]="getState() !== 'playing'">
                   </div>
               </div>`,
                styles: [`
        vg-overlay-play {
            z-index: 200;
        }
        vg-overlay-play.is-buffering {
            display: none;
        }
        vg-overlay-play .vg-overlay-play {
            transition: all 0.5s;
            cursor: pointer;
            position: absolute;
            display: block;
            color: white;
            width: 100%;
            height: 100%;
            font-size: 80px;
            filter: alpha(opacity=60);
            opacity: 0.6;
        }
        vg-overlay-play .vg-overlay-play.native-fullscreen.controls-hidden {
            cursor: none;
        }
        vg-overlay-play .vg-overlay-play .overlay-play-container.vg-icon-play_arrow {
            pointer-events: none;
            width: 100%;
            height: 100%;
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 80px;
        }
        vg-overlay-play .vg-overlay-play:hover {
            filter: alpha(opacity=100);
            opacity: 1;
        }
        vg-overlay-play .vg-overlay-play:hover .overlay-play-container.vg-icon-play_arrow:before {
            transform: scale(1.2);
        }
    `]
            }] }
];
/** @nocollapse */
VgOverlayPlay.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI },
    { type: VgFullscreenAPI },
    { type: VgControlsHidden }
];
VgOverlayPlay.propDecorators = {
    vgFor: [{ type: Input }],
    isBuffering: [{ type: HostBinding, args: ['class.is-buffering',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    VgOverlayPlay.prototype.vgFor;
    /** @type {?} */
    VgOverlayPlay.prototype.elem;
    /** @type {?} */
    VgOverlayPlay.prototype.target;
    /** @type {?} */
    VgOverlayPlay.prototype.isNativeFullscreen;
    /** @type {?} */
    VgOverlayPlay.prototype.areControlsHidden;
    /** @type {?} */
    VgOverlayPlay.prototype.subscriptions;
    /** @type {?} */
    VgOverlayPlay.prototype.isBuffering;
    /** @type {?} */
    VgOverlayPlay.prototype.API;
    /** @type {?} */
    VgOverlayPlay.prototype.fsAPI;
    /**
     * @type {?}
     * @private
     */
    VgOverlayPlay.prototype.controlsHidden;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay-play/vg-overlay-play.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VgOverlayPlayModule {
}
VgOverlayPlayModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    VgOverlayPlay
                ],
                exports: [
                    VgOverlayPlay
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/streaming/vg-dash/vg-dash.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:directive-class-suffix
// tslint:disable:no-output-on-prefix
// tslint:disable:no-string-literal
class VgDASH {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.ref = ref;
        this.API = API;
        this.onGetBitrates = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        this.target = this.API.getMediaById(this.vgFor);
        this.createPlayer();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['vgDash'] && changes['vgDash'].currentValue) {
            this.createPlayer();
        }
        else {
            this.destroyPlayer();
        }
    }
    /**
     * @return {?}
     */
    createPlayer() {
        if (this.dash) {
            this.destroyPlayer();
        }
        // It's a DASH source
        if (this.vgDash && ((this.vgDash.indexOf('.mpd') > -1) ||
            (this.vgDash.indexOf('mpd-time-csf') > -1))) {
            /** @type {?} */
            let drmOptions;
            if (this.vgDRMLicenseServer) {
                drmOptions = this.vgDRMLicenseServer;
                if (this.vgDRMToken) {
                    for (const drmServer in drmOptions) {
                        if (drmServer.hasOwnProperty(drmServer)) {
                            drmOptions[drmServer].httpRequestHeaders = { Authorization: this.vgDRMToken };
                        }
                    }
                }
            }
            this.dash = dashjs.MediaPlayer().create();
            this.dash.getDebug().setLogToBrowserConsole(false);
            this.dash.initialize(this.ref.nativeElement);
            this.dash.setAutoPlay(false);
            this.dash.on(dashjs.MediaPlayer.events.STREAM_INITIALIZED, (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const audioList = this.dash.getBitrateInfoListFor('audio');
                /** @type {?} */
                const videoList = this.dash.getBitrateInfoListFor('video');
                if (audioList.length > 1) {
                    audioList.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.qualityIndex = ++item.qualityIndex));
                    audioList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    this.onGetBitrates.emit(audioList);
                }
                if (videoList.length > 1) {
                    videoList.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.qualityIndex = ++item.qualityIndex));
                    videoList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    this.onGetBitrates.emit(videoList);
                }
            }));
            if (drmOptions) {
                this.dash.setProtectionData(drmOptions);
            }
            this.dash.attachSource(this.vgDash);
        }
        else {
            if (this.target) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgDash;
            }
        }
    }
    /**
     * @param {?} bitrate
     * @return {?}
     */
    setBitrate(bitrate) {
        if (this.dash) {
            if (bitrate.qualityIndex > 0) {
                if (this.dash.getAutoSwitchQualityFor(bitrate.mediaType)) {
                    this.dash.setAutoSwitchQualityFor(bitrate.mediaType, false);
                }
                /** @type {?} */
                const nextIndex = bitrate.qualityIndex - 1;
                this.dash.setQualityFor(bitrate.mediaType, nextIndex);
            }
            else {
                this.dash.setAutoSwitchQualityFor(bitrate.mediaType, true);
            }
        }
    }
    /**
     * @return {?}
     */
    destroyPlayer() {
        if (this.dash) {
            this.dash.reset();
            this.dash = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
        this.destroyPlayer();
    }
}
VgDASH.decorators = [
    { type: Directive, args: [{
                selector: '[vgDash]',
                exportAs: 'vgDash'
            },] }
];
/** @nocollapse */
VgDASH.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgDASH.propDecorators = {
    vgDash: [{ type: Input }],
    vgDRMToken: [{ type: Input }],
    vgDRMLicenseServer: [{ type: Input }],
    onGetBitrates: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    VgDASH.prototype.vgDash;
    /** @type {?} */
    VgDASH.prototype.vgDRMToken;
    /** @type {?} */
    VgDASH.prototype.vgDRMLicenseServer;
    /** @type {?} */
    VgDASH.prototype.onGetBitrates;
    /** @type {?} */
    VgDASH.prototype.vgFor;
    /** @type {?} */
    VgDASH.prototype.target;
    /** @type {?} */
    VgDASH.prototype.dash;
    /** @type {?} */
    VgDASH.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    VgDASH.prototype.ref;
    /** @type {?} */
    VgDASH.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/streaming/vg-hls/vg-hls.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:no-string-literal
// tslint:disable:directive-class-suffix
// tslint:disable:no-output-on-prefix
class VgHLS {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.ref = ref;
        this.API = API;
        this.vgHlsHeaders = {};
        this.onGetBitrates = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.crossorigin = this.ref.nativeElement.getAttribute('crossorigin');
        this.preload = this.ref.nativeElement.getAttribute('preload') !== 'none';
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        if (this.vgFor) {
            this.target = this.API.getMediaById(this.vgFor);
        }
        else {
            this.target = this.API.getDefaultMedia();
        }
        this.config = (/** @type {?} */ ({
            autoStartLoad: this.preload
        }));
        // @ts-ignore
        this.config.xhrSetup = (/**
         * @param {?} xhr
         * @param {?} url
         * @return {?}
         */
        (xhr, url) => {
            // Send cookies
            if (this.crossorigin === 'use-credentials') {
                xhr.withCredentials = true;
            }
            for (const key of Object.keys(this.vgHlsHeaders)) {
                xhr.setRequestHeader(key, this.vgHlsHeaders[key]);
            }
        });
        this.createPlayer();
        if (!this.preload) {
            this.subscriptions.push(this.API.subscriptions.play.subscribe((/**
             * @return {?}
             */
            () => {
                if (this.hls) {
                    this.hls.startLoad(0);
                }
            })));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['vgHls'] && changes['vgHls'].currentValue) {
            this.createPlayer();
        }
        else if (changes['vgHlsHeaders'] && changes['vgHlsHeaders'].currentValue) {
            // Do nothing. We don't want to create a or destroy a player if the headers change.
        }
        else {
            this.destroyPlayer();
        }
    }
    /**
     * @return {?}
     */
    createPlayer() {
        if (this.hls) {
            this.destroyPlayer();
        }
        // It's a HLS source
        if (this.vgHls && this.vgHls.indexOf('m3u8') > -1 && Hls.isSupported() && this.API.isPlayerReady) {
            /** @type {?} */
            const video = this.ref.nativeElement;
            this.hls = new Hls(this.config);
            // @ts-ignore
            this.hls.on(Hls.Events.MANIFEST_PARSED, (/**
             * @param {?} event
             * @param {?} data
             * @return {?}
             */
            (event, data) => {
                /** @type {?} */
                const videoList = [];
                videoList.push({
                    qualityIndex: 0,
                    width: 0,
                    height: 0,
                    bitrate: 0,
                    mediaType: 'video',
                    label: 'AUTO'
                });
                data.levels.forEach((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                (item, index) => {
                    videoList.push({
                        qualityIndex: ++index,
                        width: item.width,
                        height: item.height,
                        bitrate: item.bitrate,
                        mediaType: 'video',
                        label: item.name
                    });
                }));
                this.onGetBitrates.emit(videoList);
            }));
            // @ts-ignore
            this.hls.on(Hls.Events.LEVEL_LOADED, (/**
             * @param {?} event
             * @param {?} data
             * @return {?}
             */
            (event, data) => {
                this.target.isLive = data.details.live;
            }));
            this.hls.loadSource(this.vgHls);
            this.hls.attachMedia(video);
        }
        else {
            if (this.target && !!this.target.pause) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgHls;
            }
        }
    }
    /**
     * @param {?} bitrate
     * @return {?}
     */
    setBitrate(bitrate) {
        if (this.hls) {
            this.hls.nextLevel = bitrate.qualityIndex - 1;
        }
    }
    /**
     * @return {?}
     */
    destroyPlayer() {
        if (this.hls) {
            this.hls.destroy();
            this.hls = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
        this.destroyPlayer();
        delete this.hls;
    }
}
VgHLS.decorators = [
    { type: Directive, args: [{
                selector: '[vgHls]',
                exportAs: 'vgHls'
            },] }
];
/** @nocollapse */
VgHLS.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgHLS.propDecorators = {
    vgHls: [{ type: Input }],
    vgHlsHeaders: [{ type: Input }],
    onGetBitrates: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    VgHLS.prototype.vgHls;
    /** @type {?} */
    VgHLS.prototype.vgHlsHeaders;
    /** @type {?} */
    VgHLS.prototype.onGetBitrates;
    /** @type {?} */
    VgHLS.prototype.vgFor;
    /** @type {?} */
    VgHLS.prototype.target;
    /** @type {?} */
    VgHLS.prototype.hls;
    /** @type {?} */
    VgHLS.prototype.preload;
    /** @type {?} */
    VgHLS.prototype.crossorigin;
    /** @type {?} */
    VgHLS.prototype.config;
    /** @type {?} */
    VgHLS.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    VgHLS.prototype.ref;
    /** @type {?} */
    VgHLS.prototype.API;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/streaming/vg-streaming.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IDRMLicenseServer() { }
class VgStreamingModule {
}
VgStreamingModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    VgDASH, VgHLS
                ],
                exports: [
                    VgDASH, VgHLS
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-videogular.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { VgAPI, VgBufferingModule, VgControlsHidden, VgControlsModule, VgCoreModule, VgDASH, VgEvents, VgFullscreenAPI, VgHLS, VgImaAdsModule, VgMediaElement, VgOverlayPlayModule, VgStates, VgStreamingModule, VgUtils, VgBuffering as ɵa, VgControls as ɵb, VgFullscreen as ɵc, VgMute as ɵd, VgVolume as ɵe, VgPlayPause as ɵf, VgPlaybackButton as ɵg, VgScrubBar as ɵh, VgScrubBarBufferingTime as ɵi, VgScrubBarCuePoints as ɵj, VgScrubBarCurrentTime as ɵk, VgUtcPipe as ɵl, VgTimeDisplay as ɵm, VgTrackSelector as ɵn, VgQualitySelector as ɵo, VgMedia as ɵp, VgCuePoints as ɵq, VgPlayer as ɵr, VgImaAds as ɵs, VgOverlayPlay as ɵt };
//# sourceMappingURL=ngx-videogular.js.map
