/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay-play/vg-overlay-play.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, HostListener, ViewEncapsulation, HostBinding } from '@angular/core';
import { VgAPI } from '../core/services/vg-api';
import { VgStates } from '../core/states/vg-states';
import { VgFullscreenAPI } from '../core/services/vg-fullscreen-api';
import { VgControlsHidden } from '../core/services/vg-controls-hidden';
var VgOverlayPlay = /** @class */ (function () {
    function VgOverlayPlay(ref, API, fsAPI, controlsHidden) {
        this.API = API;
        this.fsAPI = fsAPI;
        this.controlsHidden = controlsHidden;
        this.isNativeFullscreen = false;
        this.areControlsHidden = false;
        this.subscriptions = [];
        this.isBuffering = false;
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    VgOverlayPlay.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            function () { return _this.onPlayerReady(); })));
        }
    };
    /**
     * @return {?}
     */
    VgOverlayPlay.prototype.onPlayerReady = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.target = this.API.getMediaById(this.vgFor);
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));
        this.subscriptions.push(this.target.subscriptions.bufferDetected.subscribe((/**
         * @param {?} isBuffering
         * @return {?}
         */
        function (isBuffering) { return _this.onUpdateBuffer(isBuffering); })));
    };
    /**
     * @param {?} isBuffering
     * @return {?}
     */
    VgOverlayPlay.prototype.onUpdateBuffer = /**
     * @param {?} isBuffering
     * @return {?}
     */
    function (isBuffering) {
        this.isBuffering = isBuffering;
    };
    /**
     * @param {?} fsState
     * @return {?}
     */
    VgOverlayPlay.prototype.onChangeFullscreen = /**
     * @param {?} fsState
     * @return {?}
     */
    function (fsState) {
        if (this.fsAPI.nativeFullscreen) {
            this.isNativeFullscreen = fsState;
        }
    };
    /**
     * @param {?} hidden
     * @return {?}
     */
    VgOverlayPlay.prototype.onHideControls = /**
     * @param {?} hidden
     * @return {?}
     */
    function (hidden) {
        this.areControlsHidden = hidden;
    };
    /**
     * @return {?}
     */
    VgOverlayPlay.prototype.onClick = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var state = this.getState();
        switch (state) {
            case VgStates.VG_PLAYING:
                this.target.pause();
                break;
            case VgStates.VG_PAUSED:
            case VgStates.VG_ENDED:
                this.target.play();
                break;
        }
    };
    /**
     * @return {?}
     */
    VgOverlayPlay.prototype.getState = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var state = VgStates.VG_PAUSED;
        if (this.target) {
            if (this.target.state instanceof Array) {
                for (var i = 0, l = this.target.state.length; i < l; i++) {
                    if (this.target.state[i] === VgStates.VG_PLAYING) {
                        state = VgStates.VG_PLAYING;
                        break;
                    }
                }
            }
            else {
                state = this.target.state;
            }
        }
        return state;
    };
    /**
     * @return {?}
     */
    VgOverlayPlay.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.unsubscribe(); }));
    };
    VgOverlayPlay.decorators = [
        { type: Component, args: [{
                    selector: 'vg-overlay-play',
                    encapsulation: ViewEncapsulation.None,
                    template: "<div class=\"vg-overlay-play\"\n                    [class.native-fullscreen]=\"isNativeFullscreen\"\n                    [class.controls-hidden]=\"areControlsHidden\">\n                   <div class=\"overlay-play-container\"\n                        [class.vg-icon-play_arrow]=\"getState() !== 'playing'\">\n                   </div>\n               </div>",
                    styles: ["\n        vg-overlay-play {\n            z-index: 200;\n        }\n        vg-overlay-play.is-buffering {\n            display: none;\n        }\n        vg-overlay-play .vg-overlay-play {\n            transition: all 0.5s;\n            cursor: pointer;\n            position: absolute;\n            display: block;\n            color: white;\n            width: 100%;\n            height: 100%;\n            font-size: 80px;\n            filter: alpha(opacity=60);\n            opacity: 0.6;\n        }\n        vg-overlay-play .vg-overlay-play.native-fullscreen.controls-hidden {\n            cursor: none;\n        }\n        vg-overlay-play .vg-overlay-play .overlay-play-container.vg-icon-play_arrow {\n            pointer-events: none;\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 80px;\n        }\n        vg-overlay-play .vg-overlay-play:hover {\n            filter: alpha(opacity=100);\n            opacity: 1;\n        }\n        vg-overlay-play .vg-overlay-play:hover .overlay-play-container.vg-icon-play_arrow:before {\n            transform: scale(1.2);\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    VgOverlayPlay.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VgAPI },
        { type: VgFullscreenAPI },
        { type: VgControlsHidden }
    ]; };
    VgOverlayPlay.propDecorators = {
        vgFor: [{ type: Input }],
        isBuffering: [{ type: HostBinding, args: ['class.is-buffering',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return VgOverlayPlay;
}());
export { VgOverlayPlay };
if (false) {
    /** @type {?} */
    VgOverlayPlay.prototype.vgFor;
    /** @type {?} */
    VgOverlayPlay.prototype.elem;
    /** @type {?} */
    VgOverlayPlay.prototype.target;
    /** @type {?} */
    VgOverlayPlay.prototype.isNativeFullscreen;
    /** @type {?} */
    VgOverlayPlay.prototype.areControlsHidden;
    /** @type {?} */
    VgOverlayPlay.prototype.subscriptions;
    /** @type {?} */
    VgOverlayPlay.prototype.isBuffering;
    /** @type {?} */
    VgOverlayPlay.prototype.API;
    /** @type {?} */
    VgOverlayPlay.prototype.fsAPI;
    /**
     * @type {?}
     * @private
     */
    VgOverlayPlay.prototype.controlsHidden;
}
//# sourceMappingURL=data:application/json;base64,