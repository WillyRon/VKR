/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-controls.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, HostBinding, ViewEncapsulation } from '@angular/core';
import { VgAPI } from '../core/services/vg-api';
import { VgControlsHidden } from '../core/services/vg-controls-hidden';
import { VgStates } from '../core/states/vg-states';
import { fromEvent } from 'rxjs';
// tslint:disable:component-class-suffix
var VgControls = /** @class */ (function () {
    function VgControls(API, ref, hidden) {
        this.API = API;
        this.ref = ref;
        this.hidden = hidden;
        this.isAdsPlaying = 'initial';
        this.hideControls = false;
        this.vgAutohide = false;
        this.vgAutohideTime = 3;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    VgControls.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.mouseMove$ = fromEvent(this.API.videogularElement, 'mousemove');
        this.subscriptions.push(this.mouseMove$.subscribe(this.show.bind(this)));
        this.touchStart$ = fromEvent(this.API.videogularElement, 'touchstart');
        this.subscriptions.push(this.touchStart$.subscribe(this.show.bind(this)));
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            function () { return _this.onPlayerReady(); })));
        }
    };
    /**
     * @return {?}
     */
    VgControls.prototype.onPlayerReady = /**
     * @return {?}
     */
    function () {
        this.target = this.API.getMediaById(this.vgFor);
        this.subscriptions.push(this.target.subscriptions.play.subscribe(this.onPlay.bind(this)));
        this.subscriptions.push(this.target.subscriptions.pause.subscribe(this.onPause.bind(this)));
        this.subscriptions.push(this.target.subscriptions.startAds.subscribe(this.onStartAds.bind(this)));
        this.subscriptions.push(this.target.subscriptions.endAds.subscribe(this.onEndAds.bind(this)));
    };
    /**
     * @return {?}
     */
    VgControls.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.vgAutohide) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    /**
     * @return {?}
     */
    VgControls.prototype.onPlay = /**
     * @return {?}
     */
    function () {
        if (this.vgAutohide) {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    VgControls.prototype.onPause = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.timer);
        this.hideControls = false;
        this.hidden.state(false);
    };
    /**
     * @return {?}
     */
    VgControls.prototype.onStartAds = /**
     * @return {?}
     */
    function () {
        this.isAdsPlaying = 'none';
    };
    /**
     * @return {?}
     */
    VgControls.prototype.onEndAds = /**
     * @return {?}
     */
    function () {
        this.isAdsPlaying = 'initial';
    };
    /**
     * @return {?}
     */
    VgControls.prototype.hide = /**
     * @return {?}
     */
    function () {
        if (this.vgAutohide) {
            clearTimeout(this.timer);
            this.hideAsync();
        }
    };
    /**
     * @return {?}
     */
    VgControls.prototype.show = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.timer);
        this.hideControls = false;
        this.hidden.state(false);
        if (this.vgAutohide) {
            this.hideAsync();
        }
    };
    /**
     * @private
     * @return {?}
     */
    VgControls.prototype.hideAsync = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.API.state === VgStates.VG_PLAYING) {
            this.timer = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.hideControls = true;
                _this.hidden.state(true);
            }), this.vgAutohideTime * 1000);
        }
    };
    /**
     * @return {?}
     */
    VgControls.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.unsubscribe(); }));
    };
    VgControls.decorators = [
        { type: Component, args: [{
                    selector: 'vg-controls',
                    encapsulation: ViewEncapsulation.None,
                    template: "<ng-content></ng-content>",
                    styles: ["\n        vg-controls {\n            position: absolute;\n            display: flex;\n            width: 100%;\n            height: 50px;\n            z-index: 300;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            -webkit-transition: bottom 1s;\n            -khtml-transition: bottom 1s;\n            -moz-transition: bottom 1s;\n            -ms-transition: bottom 1s;\n            transition: bottom 1s;\n        }\n        vg-controls.hide {\n            bottom: -50px;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    VgControls.ctorParameters = function () { return [
        { type: VgAPI },
        { type: ElementRef },
        { type: VgControlsHidden }
    ]; };
    VgControls.propDecorators = {
        isAdsPlaying: [{ type: HostBinding, args: ['style.pointer-events',] }],
        hideControls: [{ type: HostBinding, args: ['class.hide',] }],
        vgFor: [{ type: Input }],
        vgAutohide: [{ type: Input }],
        vgAutohideTime: [{ type: Input }]
    };
    return VgControls;
}());
export { VgControls };
if (false) {
    /** @type {?} */
    VgControls.prototype.elem;
    /** @type {?} */
    VgControls.prototype.target;
    /** @type {?} */
    VgControls.prototype.isAdsPlaying;
    /** @type {?} */
    VgControls.prototype.hideControls;
    /** @type {?} */
    VgControls.prototype.vgFor;
    /** @type {?} */
    VgControls.prototype.vgAutohide;
    /** @type {?} */
    VgControls.prototype.vgAutohideTime;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.timer;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.hideTimer;
    /** @type {?} */
    VgControls.prototype.mouseMove$;
    /** @type {?} */
    VgControls.prototype.touchStart$;
    /** @type {?} */
    VgControls.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.API;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    VgControls.prototype.hidden;
}
//# sourceMappingURL=data:application/json;base64,