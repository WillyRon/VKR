/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-scrub-bar/vg-scrub-bar-cue-points/vg-scrub-bar-cue-points.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
import { VgAPI } from '../../../core/services/vg-api';
// tslint:disable:no-conflicting-lifecycle
// tslint:disable:component-class-suffix
// tslint:disable:no-string-literal
var VgScrubBarCuePoints = /** @class */ (function () {
    function VgScrubBarCuePoints(ref, API) {
        this.API = API;
        this.onLoadedMetadataCalled = false;
        this.cuePoints = [];
        this.subscriptions = [];
        this.totalCues = 0;
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    VgScrubBarCuePoints.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            function () { return _this.onPlayerReady(); })));
        }
    };
    /**
     * @return {?}
     */
    VgScrubBarCuePoints.prototype.onPlayerReady = /**
     * @return {?}
     */
    function () {
        this.target = this.API.getMediaById(this.vgFor);
        /** @type {?} */
        var onTimeUpdate = this.target.subscriptions.loadedMetadata;
        this.subscriptions.push(onTimeUpdate.subscribe(this.onLoadedMetadata.bind(this)));
        if (this.onLoadedMetadataCalled) {
            this.onLoadedMetadata();
        }
    };
    /**
     * @return {?}
     */
    VgScrubBarCuePoints.prototype.onLoadedMetadata = /**
     * @return {?}
     */
    function () {
        if (this.vgCuePoints) {
            // We need to transform the TextTrackCueList to Array or it doesn't work on IE11/Edge.
            // See: https://github.com/videogular/videogular2/issues/369
            this.cuePoints = [];
            for (var i = 0, l = this.vgCuePoints.length; i < l; i++) {
                /** @type {?} */
                var end = (this.vgCuePoints[i].endTime >= 0) ? this.vgCuePoints[i].endTime : this.vgCuePoints[i].startTime + 1;
                /** @type {?} */
                var cuePointDuration = (end - this.vgCuePoints[i].startTime) * 1000;
                /** @type {?} */
                var position = '0';
                /** @type {?} */
                var percentWidth = '0';
                if (typeof cuePointDuration === 'number' && this.target.time.total) {
                    percentWidth = ((cuePointDuration * 100) / this.target.time.total) + '%';
                    position = (this.vgCuePoints[i].startTime * 100 / (Math.round(this.target.time.total / 1000))) + '%';
                }
                ((/** @type {?} */ (this.vgCuePoints[i]))).$$style = {
                    width: percentWidth,
                    left: position
                };
                this.cuePoints.push(this.vgCuePoints[i]);
            }
        }
    };
    /**
     * @return {?}
     */
    VgScrubBarCuePoints.prototype.updateCuePoints = /**
     * @return {?}
     */
    function () {
        if (!this.target) {
            this.onLoadedMetadataCalled = true;
            return;
        }
        this.onLoadedMetadata();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    VgScrubBarCuePoints.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['vgCuePoints'].currentValue) {
            this.updateCuePoints();
        }
    };
    /**
     * @return {?}
     */
    VgScrubBarCuePoints.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.vgCuePoints) {
            /** @type {?} */
            var changes = this.totalCues !== this.vgCuePoints.length;
            if (changes) {
                this.totalCues = this.vgCuePoints.length;
                this.updateCuePoints();
            }
        }
    };
    /**
     * @return {?}
     */
    VgScrubBarCuePoints.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.unsubscribe(); }));
    };
    VgScrubBarCuePoints.decorators = [
        { type: Component, args: [{
                    selector: 'vg-scrub-bar-cue-points',
                    encapsulation: ViewEncapsulation.None,
                    template: "\n        <div class=\"cue-point-container\">\n            <span *ngFor=\"let cp of cuePoints\" [style.width]=\"cp.$$style?.width\" [style.left]=\"cp.$$style?.left\"\n                  class=\"cue-point\"></span>\n        </div>\n    ",
                    styles: ["\n        vg-scrub-bar-cue-points {\n            display: flex;\n            width: 100%;\n            height: 5px;\n            pointer-events: none;\n            position: absolute;\n        }\n        vg-scrub-bar-cue-points .cue-point-container .cue-point {\n            position: absolute;\n            height: 5px;\n            background-color: rgba(255, 204, 0, 0.7);\n        }\n        vg-controls vg-scrub-bar-cue-points {\n            position: absolute;\n            top: calc(50% - 3px);\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    VgScrubBarCuePoints.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VgAPI }
    ]; };
    VgScrubBarCuePoints.propDecorators = {
        vgCuePoints: [{ type: Input }],
        vgFor: [{ type: Input }]
    };
    return VgScrubBarCuePoints;
}());
export { VgScrubBarCuePoints };
if (false) {
    /** @type {?} */
    VgScrubBarCuePoints.prototype.vgCuePoints;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.vgFor;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.elem;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.target;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.onLoadedMetadataCalled;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.cuePoints;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.subscriptions;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.totalCues;
    /** @type {?} */
    VgScrubBarCuePoints.prototype.API;
}
//# sourceMappingURL=data:application/json;base64,