/**
 * @fileoverview added by tsickle
 * Generated from: lib/streaming/vg-dash/vg-dash.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
var VgDASH = /** @class */ (function () {
    function VgDASH(ref, API) {
        this.ref = ref;
        this.API = API;
        this.onGetBitrates = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    VgDASH.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            function () { return _this.onPlayerReady(); })));
        }
    };
    /**
     * @return {?}
     */
    VgDASH.prototype.onPlayerReady = /**
     * @return {?}
     */
    function () {
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        this.target = this.API.getMediaById(this.vgFor);
        this.createPlayer();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    VgDASH.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['vgDash'] && changes['vgDash'].currentValue) {
            this.createPlayer();
        }
        else {
            this.destroyPlayer();
        }
    };
    /**
     * @return {?}
     */
    VgDASH.prototype.createPlayer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dash) {
            this.destroyPlayer();
        }
        // It's a DASH source
        if (this.vgDash && ((this.vgDash.indexOf('.mpd') > -1) ||
            (this.vgDash.indexOf('mpd-time-csf') > -1))) {
            /** @type {?} */
            var drmOptions = void 0;
            if (this.vgDRMLicenseServer) {
                drmOptions = this.vgDRMLicenseServer;
                if (this.vgDRMToken) {
                    for (var drmServer in drmOptions) {
                        if (drmServer.hasOwnProperty(drmServer)) {
                            drmOptions[drmServer].httpRequestHeaders = { Authorization: this.vgDRMToken };
                        }
                    }
                }
            }
            this.dash = dashjs.MediaPlayer().create();
            this.dash.getDebug().setLogToBrowserConsole(false);
            this.dash.initialize(this.ref.nativeElement);
            this.dash.setAutoPlay(false);
            this.dash.on(dashjs.MediaPlayer.events.STREAM_INITIALIZED, (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var audioList = _this.dash.getBitrateInfoListFor('audio');
                /** @type {?} */
                var videoList = _this.dash.getBitrateInfoListFor('video');
                if (audioList.length > 1) {
                    audioList.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.qualityIndex = ++item.qualityIndex; }));
                    audioList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    _this.onGetBitrates.emit(audioList);
                }
                if (videoList.length > 1) {
                    videoList.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.qualityIndex = ++item.qualityIndex; }));
                    videoList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    _this.onGetBitrates.emit(videoList);
                }
            }));
            if (drmOptions) {
                this.dash.setProtectionData(drmOptions);
            }
            this.dash.attachSource(this.vgDash);
        }
        else {
            if (this.target) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgDash;
            }
        }
    };
    /**
     * @param {?} bitrate
     * @return {?}
     */
    VgDASH.prototype.setBitrate = /**
     * @param {?} bitrate
     * @return {?}
     */
    function (bitrate) {
        if (this.dash) {
            if (bitrate.qualityIndex > 0) {
                if (this.dash.getAutoSwitchQualityFor(bitrate.mediaType)) {
                    this.dash.setAutoSwitchQualityFor(bitrate.mediaType, false);
                }
                /** @type {?} */
                var nextIndex = bitrate.qualityIndex - 1;
                this.dash.setQualityFor(bitrate.mediaType, nextIndex);
            }
            else {
                this.dash.setAutoSwitchQualityFor(bitrate.mediaType, true);
            }
        }
    };
    /**
     * @return {?}
     */
    VgDASH.prototype.destroyPlayer = /**
     * @return {?}
     */
    function () {
        if (this.dash) {
            this.dash.reset();
            this.dash = null;
        }
    };
    /**
     * @return {?}
     */
    VgDASH.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.unsubscribe(); }));
        this.destroyPlayer();
    };
    VgDASH.decorators = [
        { type: Directive, args: [{
                    selector: '[vgDash]',
                    exportAs: 'vgDash'
                },] }
    ];
    /** @nocollapse */
    VgDASH.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VgAPI }
    ]; };
    VgDASH.propDecorators = {
        vgDash: [{ type: Input }],
        vgDRMToken: [{ type: Input }],
        vgDRMLicenseServer: [{ type: Input }],
        onGetBitrates: [{ type: Output }]
    };
    return VgDASH;
}());
export { VgDASH };
if (false) {
    /** @type {?} */
    VgDASH.prototype.vgDash;
    /** @type {?} */
    VgDASH.prototype.vgDRMToken;
    /** @type {?} */
    VgDASH.prototype.vgDRMLicenseServer;
    /** @type {?} */
    VgDASH.prototype.onGetBitrates;
    /** @type {?} */
    VgDASH.prototype.vgFor;
    /** @type {?} */
    VgDASH.prototype.target;
    /** @type {?} */
    VgDASH.prototype.dash;
    /** @type {?} */
    VgDASH.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    VgDASH.prototype.ref;
    /** @type {?} */
    VgDASH.prototype.API;
}
//# sourceMappingURL=data:application/json;base64,