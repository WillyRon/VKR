/**
 * @fileoverview added by tsickle
 * Generated from: lib/streaming/vg-hls/vg-hls.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
var VgHLS = /** @class */ (function () {
    function VgHLS(ref, API) {
        this.ref = ref;
        this.API = API;
        this.vgHlsHeaders = {};
        this.onGetBitrates = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    VgHLS.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            function () { return _this.onPlayerReady(); })));
        }
    };
    /**
     * @return {?}
     */
    VgHLS.prototype.onPlayerReady = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.crossorigin = this.ref.nativeElement.getAttribute('crossorigin');
        this.preload = this.ref.nativeElement.getAttribute('preload') !== 'none';
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        if (this.vgFor) {
            this.target = this.API.getMediaById(this.vgFor);
        }
        else {
            this.target = this.API.getDefaultMedia();
        }
        this.config = (/** @type {?} */ ({
            autoStartLoad: this.preload
        }));
        // @ts-ignore
        this.config.xhrSetup = (/**
         * @param {?} xhr
         * @param {?} url
         * @return {?}
         */
        function (xhr, url) {
            var e_1, _a;
            // Send cookies
            if (_this.crossorigin === 'use-credentials') {
                xhr.withCredentials = true;
            }
            try {
                for (var _b = tslib_1.__values(Object.keys(_this.vgHlsHeaders)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    xhr.setRequestHeader(key, _this.vgHlsHeaders[key]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        this.createPlayer();
        if (!this.preload) {
            this.subscriptions.push(this.API.subscriptions.play.subscribe((/**
             * @return {?}
             */
            function () {
                if (_this.hls) {
                    _this.hls.startLoad(0);
                }
            })));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    VgHLS.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['vgHls'] && changes['vgHls'].currentValue) {
            this.createPlayer();
        }
        else if (changes['vgHlsHeaders'] && changes['vgHlsHeaders'].currentValue) {
            // Do nothing. We don't want to create a or destroy a player if the headers change.
        }
        else {
            this.destroyPlayer();
        }
    };
    /**
     * @return {?}
     */
    VgHLS.prototype.createPlayer = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.hls) {
            this.destroyPlayer();
        }
        // It's a HLS source
        if (this.vgHls && this.vgHls.indexOf('m3u8') > -1 && Hls.isSupported() && this.API.isPlayerReady) {
            /** @type {?} */
            var video = this.ref.nativeElement;
            this.hls = new Hls(this.config);
            // @ts-ignore
            this.hls.on(Hls.Events.MANIFEST_PARSED, (/**
             * @param {?} event
             * @param {?} data
             * @return {?}
             */
            function (event, data) {
                /** @type {?} */
                var videoList = [];
                videoList.push({
                    qualityIndex: 0,
                    width: 0,
                    height: 0,
                    bitrate: 0,
                    mediaType: 'video',
                    label: 'AUTO'
                });
                data.levels.forEach((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                function (item, index) {
                    videoList.push({
                        qualityIndex: ++index,
                        width: item.width,
                        height: item.height,
                        bitrate: item.bitrate,
                        mediaType: 'video',
                        label: item.name
                    });
                }));
                _this.onGetBitrates.emit(videoList);
            }));
            // @ts-ignore
            this.hls.on(Hls.Events.LEVEL_LOADED, (/**
             * @param {?} event
             * @param {?} data
             * @return {?}
             */
            function (event, data) {
                _this.target.isLive = data.details.live;
            }));
            this.hls.loadSource(this.vgHls);
            this.hls.attachMedia(video);
        }
        else {
            if (this.target && !!this.target.pause) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgHls;
            }
        }
    };
    /**
     * @param {?} bitrate
     * @return {?}
     */
    VgHLS.prototype.setBitrate = /**
     * @param {?} bitrate
     * @return {?}
     */
    function (bitrate) {
        if (this.hls) {
            this.hls.nextLevel = bitrate.qualityIndex - 1;
        }
    };
    /**
     * @return {?}
     */
    VgHLS.prototype.destroyPlayer = /**
     * @return {?}
     */
    function () {
        if (this.hls) {
            this.hls.destroy();
            this.hls = null;
        }
    };
    /**
     * @return {?}
     */
    VgHLS.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.unsubscribe(); }));
        this.destroyPlayer();
        delete this.hls;
    };
    VgHLS.decorators = [
        { type: Directive, args: [{
                    selector: '[vgHls]',
                    exportAs: 'vgHls'
                },] }
    ];
    /** @nocollapse */
    VgHLS.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VgAPI }
    ]; };
    VgHLS.propDecorators = {
        vgHls: [{ type: Input }],
        vgHlsHeaders: [{ type: Input }],
        onGetBitrates: [{ type: Output }]
    };
    return VgHLS;
}());
export { VgHLS };
if (false) {
    /** @type {?} */
    VgHLS.prototype.vgHls;
    /** @type {?} */
    VgHLS.prototype.vgHlsHeaders;
    /** @type {?} */
    VgHLS.prototype.onGetBitrates;
    /** @type {?} */
    VgHLS.prototype.vgFor;
    /** @type {?} */
    VgHLS.prototype.target;
    /** @type {?} */
    VgHLS.prototype.hls;
    /** @type {?} */
    VgHLS.prototype.preload;
    /** @type {?} */
    VgHLS.prototype.crossorigin;
    /** @type {?} */
    VgHLS.prototype.config;
    /** @type {?} */
    VgHLS.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    VgHLS.prototype.ref;
    /** @type {?} */
    VgHLS.prototype.API;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctaGxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXZpZGVvZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc3RyZWFtaW5nL3ZnLWhscy92Zy1obHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUtMLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBT25EO0lBcUJFLGVBQW9CLEdBQWUsRUFBUyxHQUFVO1FBQWxDLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFPO1FBWjdDLGlCQUFZLEdBQThCLEVBQUUsQ0FBQztRQUM1QyxrQkFBYSxHQUFrQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBUzVFLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztJQUV1QixDQUFDOzs7O0lBRTNELHdCQUFROzs7SUFBUjtRQUFBLGlCQU1DO1FBTEMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRTtZQUMxQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7YUFBTTtZQUNMLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsU0FBUzs7O1lBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxhQUFhLEVBQUUsRUFBcEIsQ0FBb0IsRUFBQyxDQUFDLENBQUM7U0FDMUY7SUFDSCxDQUFDOzs7O0lBRUQsNkJBQWE7OztJQUFiO1FBQUEsaUJBdUNDO1FBdENDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFD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RDs7SUFDdEQsOEJBQTRFOztJQUU1RSxzQkFBYzs7SUFDZCx1QkFBWTs7SUFDWixvQkFBUzs7SUFDVCx3QkFBaUI7O0lBQ2pCLDRCQUFvQjs7SUFDcEIsdUJBQW1COztJQUVuQiw4QkFBbUM7Ozs7O0lBRXZCLG9CQUF1Qjs7SUFBRSxvQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZnQVBJIH0gZnJvbSAnLi4vLi4vY29yZS9zZXJ2aWNlcy92Zy1hcGknO1xuaW1wb3J0IHsgSUhMU0NvbmZpZyB9IGZyb20gJy4vaGxzLWNvbmZpZyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJpdHJhdGVPcHRpb24gfSBmcm9tICcuLi8uLi9jb3JlL3ZnLWNvcmUubW9kdWxlJztcblxuZGVjbGFyZSBsZXQgSGxzO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdmdIbHNdJyxcbiAgZXhwb3J0QXM6ICd2Z0hscydcbn0pXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1zdHJpbmctbGl0ZXJhbFxuLy8gdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuLy8gdHNsaW50OmRpc2FibGU6bm8tb3V0cHV0LW9uLXByZWZpeFxuZXhwb3J0IGNsYXNzIFZnSExTIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHZnSGxzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHZnSGxzSGVhZGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICBAT3V0cHV0KCkgb25HZXRCaXRyYXRlczogRXZlbnRFbWl0dGVyPEJpdHJhdGVPcHRpb25bXT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgdmdGb3I6IHN0cmluZztcbiAgdGFyZ2V0OiBhbnk7XG4gIGhsczogYW55O1xuICBwcmVsb2FkOiBib29sZWFuO1xuICBjcm9zc29yaWdpbjogc3RyaW5nO1xuICBjb25maWc6IElITFNDb25maWc7XG5cbiAgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlZjogRWxlbWVudFJlZiwgcHVibGljIEFQSTogVmdBUEkpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLkFQSS5pc1BsYXllclJlYWR5KSB7XG4gICAgICB0aGlzLm9uUGxheWVyUmVhZHkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5BUEkucGxheWVyUmVhZHlFdmVudC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5vblBsYXllclJlYWR5KCkpKTtcbiAgICB9XG4gIH1cblxuICBvblBsYXllclJlYWR5KCkge1xuICAgIHRoaXMuY3Jvc3NvcmlnaW4gPSB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nKTtcbiAgICB0aGlzLnByZWxvYWQgPSB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgncHJlbG9hZCcpICE9PSAnbm9uZSc7XG4gICAgdGhpcy52Z0ZvciA9IHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCd2Z0ZvcicpO1xuXG4gICAgaWYgKHRoaXMudmdGb3IpIHtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5BUEkuZ2V0TWVkaWFCeUlkKHRoaXMudmdGb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRhcmdldCA9IHRoaXMuQVBJLmdldERlZmF1bHRNZWRpYSgpO1xuICAgIH1cblxuXG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBhdXRvU3RhcnRMb2FkOiB0aGlzLnByZWxvYWRcbiAgICB9IGFzIElITFNDb25maWc7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMuY29uZmlnLnhoclNldHVwID0gKHhociwgdXJsKSA9PiB7XG4gICAgICAvLyBTZW5kIGNvb2tpZXNcbiAgICAgIGlmICh0aGlzLmNyb3Nzb3JpZ2luID09PSAndXNlLWNyZWRlbnRpYWxzJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMudmdIbHNIZWFkZXJzKSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHRoaXMudmdIbHNIZWFkZXJzW2tleV0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmNyZWF0ZVBsYXllcigpO1xuXG4gICAgaWYgKCF0aGlzLnByZWxvYWQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgICB0aGlzLkFQSS5zdWJzY3JpcHRpb25zLnBsYXkuc3Vic2NyaWJlKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhscykge1xuICAgICAgICAgICAgICB0aGlzLmhscy5zdGFydExvYWQoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcblxuICAgIGlmIChjaGFuZ2VzWyd2Z0hscyddICYmIGNoYW5nZXNbJ3ZnSGxzJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLmNyZWF0ZVBsYXllcigpO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlc1sndmdIbHNIZWFkZXJzJ10gJiYgY2hhbmdlc1sndmdIbHNIZWFkZXJzJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICAvLyBEbyBub3RoaW5nLiBXZSBkb24ndCB3YW50IHRvIGNyZWF0ZSBhIG9yIGRlc3Ryb3kgYSBwbGF5ZXIgaWYgdGhlIGhlYWRlcnMgY2hhbmdlLlxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlc3Ryb3lQbGF5ZXIoKTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVQbGF5ZXIoKSB7XG4gICAgaWYgKHRoaXMuaGxzKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lQbGF5ZXIoKTtcbiAgICB9XG5cbiAgICAvLyBJdCdzIGEgSExTIHNvdXJjZVxuICAgIGlmICh0aGlzLnZnSGxzICYmIHRoaXMudmdIbHMuaW5kZXhPZignbTN1OCcpID4gLTEgJiYgSGxzLmlzU3VwcG9ydGVkKCkgJiYgdGhpcy5BUEkuaXNQbGF5ZXJSZWFkeSkge1xuICAgICAgY29uc3QgdmlkZW86IEhUTUxWaWRlb0VsZW1lbnQgPSB0aGlzLnJlZi5uYXRpdmVFbGVtZW50O1xuXG4gICAgICB0aGlzLmhscyA9IG5ldyBIbHModGhpcy5jb25maWcpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5obHMub24oSGxzLkV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIChldmVudCwgZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCB2aWRlb0xpc3QgPSBbXTtcblxuICAgICAgICB2aWRlb0xpc3QucHVzaCh7XG4gICAgICAgICAgcXVhbGl0eUluZGV4OiAwLFxuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICBiaXRyYXRlOiAwLFxuICAgICAgICAgIG1lZGlhVHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgICBsYWJlbDogJ0FVVE8nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRhdGEubGV2ZWxzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgdmlkZW9MaXN0LnB1c2goe1xuICAgICAgICAgICAgcXVhbGl0eUluZGV4OiArK2luZGV4LFxuICAgICAgICAgICAgd2lkdGg6IGl0ZW0ud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGl0ZW0uaGVpZ2h0LFxuICAgICAgICAgICAgYml0cmF0ZTogaXRlbS5iaXRyYXRlLFxuICAgICAgICAgICAgbWVkaWFUeXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgbGFiZWw6IGl0ZW0ubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm9uR2V0Qml0cmF0ZXMuZW1pdCh2aWRlb0xpc3QpO1xuICAgICAgfVxuICAgICAgKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMuaGxzLm9uKEhscy5FdmVudHMuTEVWRUxfTE9BREVELCAoZXZlbnQsIGRhdGEpID0+IHtcbiAgICAgICAgdGhpcy50YXJnZXQuaXNMaXZlID0gZGF0YS5kZXRhaWxzLmxpdmU7XG4gICAgICB9XG4gICAgICApO1xuXG4gICAgICB0aGlzLmhscy5sb2FkU291cmNlKHRoaXMudmdIbHMpO1xuICAgICAgdGhpcy5obHMuYXR0YWNoTWVkaWEodmlkZW8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy50YXJnZXQgJiYgISF0aGlzLnRhcmdldC5wYXVzZSkge1xuICAgICAgICB0aGlzLnRhcmdldC5wYXVzZSgpO1xuICAgICAgICB0aGlzLnRhcmdldC5zZWVrVGltZSgwKTtcbiAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5zcmMgPSB0aGlzLnZnSGxzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEJpdHJhdGUoYml0cmF0ZTogQml0cmF0ZU9wdGlvbikge1xuICAgIGlmICh0aGlzLmhscykge1xuICAgICAgdGhpcy5obHMubmV4dExldmVsID0gYml0cmF0ZS5xdWFsaXR5SW5kZXggLSAxO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lQbGF5ZXIoKSB7XG4gICAgaWYgKHRoaXMuaGxzKSB7XG4gICAgICB0aGlzLmhscy5kZXN0cm95KCk7XG4gICAgICB0aGlzLmhscyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2gocyA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgIHRoaXMuZGVzdHJveVBsYXllcigpO1xuICAgIGRlbGV0ZSB0aGlzLmhscztcbiAgfVxufVxuIl19