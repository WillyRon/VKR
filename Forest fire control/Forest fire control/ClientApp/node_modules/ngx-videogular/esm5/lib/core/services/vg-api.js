/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/vg-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { VgStates } from '../states/vg-states';
var VgAPI = /** @class */ (function () {
    function VgAPI() {
        // tslint:disable-next-line:ban-types
        this.medias = {}; // TODO: refactor to Set<IPlayable>
        this.playerReadyEvent = new EventEmitter(true);
        this.isPlayerReady = false;
    }
    /**
     * @param {?} fsAPI
     * @return {?}
     */
    VgAPI.prototype.onPlayerReady = /**
     * @param {?} fsAPI
     * @return {?}
     */
    function (fsAPI) {
        this.fsAPI = fsAPI;
        this.isPlayerReady = true;
        this.playerReadyEvent.emit(this);
    };
    /**
     * @return {?}
     */
    VgAPI.prototype.getDefaultMedia = /**
     * @return {?}
     */
    function () {
        for (var item in this.medias) {
            if (this.medias[item]) {
                return this.medias[item];
            }
        }
    };
    /**
     * @return {?}
     */
    VgAPI.prototype.getMasterMedia = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var master;
        for (var id in this.medias) {
            if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {
                master = this.medias[id];
                break;
            }
        }
        return master || this.getDefaultMedia();
    };
    /**
     * @return {?}
     */
    VgAPI.prototype.isMasterDefined = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = false;
        for (var id in this.medias) {
            if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {
                result = true;
                break;
            }
        }
        return result;
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    VgAPI.prototype.getMediaById = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id === void 0) { id = null; }
        /** @type {?} */
        var media = this.medias[id];
        if (!id || id === '*') {
            media = this;
        }
        return media;
    };
    /**
     * @return {?}
     */
    VgAPI.prototype.play = /**
     * @return {?}
     */
    function () {
        for (var id in this.medias) {
            if (this.medias[id]) {
                this.medias[id].play();
            }
        }
    };
    /**
     * @return {?}
     */
    VgAPI.prototype.pause = /**
     * @return {?}
     */
    function () {
        for (var id in this.medias) {
            if (this.medias[id]) {
                this.medias[id].pause();
            }
        }
    };
    Object.defineProperty(VgAPI.prototype, "duration", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('duration');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "currentTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('currentTime');
        },
        set: /**
         * @param {?} seconds
         * @return {?}
         */
        function (seconds) {
            this.$$setAllProperties('currentTime', seconds);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "state", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('state');
        },
        set: /**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            this.$$setAllProperties('state', state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "volume", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('volume');
        },
        set: /**
         * @param {?} volume
         * @return {?}
         */
        function (volume) {
            this.$$setAllProperties('volume', volume);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "playbackRate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('playbackRate');
        },
        set: /**
         * @param {?} rate
         * @return {?}
         */
        function (rate) {
            this.$$setAllProperties('playbackRate', rate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "canPlay", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('canPlay');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "canPlayThrough", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('canPlayThrough');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "isMetadataLoaded", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('isMetadataLoaded');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "isWaiting", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('isWaiting');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "isCompleted", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('isCompleted');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "isLive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('isLive');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "isMaster", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('isMaster');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "time", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('time');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "buffer", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('buffer');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "buffered", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('buffered');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "subscriptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('subscriptions');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VgAPI.prototype, "textTracks", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$$getAllProperties('textTracks');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?=} byPercent
     * @return {?}
     */
    VgAPI.prototype.seekTime = /**
     * @param {?} value
     * @param {?=} byPercent
     * @return {?}
     */
    function (value, byPercent) {
        if (byPercent === void 0) { byPercent = false; }
        for (var id in this.medias) {
            if (this.medias[id]) {
                this.$$seek(this.medias[id], value, byPercent);
            }
        }
    };
    /**
     * @param {?} media
     * @param {?} value
     * @param {?=} byPercent
     * @return {?}
     */
    VgAPI.prototype.$$seek = /**
     * @param {?} media
     * @param {?} value
     * @param {?=} byPercent
     * @return {?}
     */
    function (media, value, byPercent) {
        if (byPercent === void 0) { byPercent = false; }
        /** @type {?} */
        var second;
        /** @type {?} */
        var duration = media.duration;
        if (byPercent) {
            if (this.isMasterDefined()) {
                duration = this.getMasterMedia().duration;
            }
            second = value * duration / 100;
        }
        else {
            second = value;
        }
        media.currentTime = second;
    };
    /**
     * @param {?} type
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    VgAPI.prototype.addTextTrack = /**
     * @param {?} type
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    function (type, label, language) {
        for (var id in this.medias) {
            if (this.medias[id]) {
                this.$$addTextTrack(this.medias[id], type, label, language);
            }
        }
    };
    /**
     * @param {?} media
     * @param {?} type
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    VgAPI.prototype.$$addTextTrack = /**
     * @param {?} media
     * @param {?} type
     * @param {?=} label
     * @param {?=} language
     * @return {?}
     */
    function (media, type, label, language) {
        media.addTextTrack(type, label, language);
    };
    /**
     * @param {?} property
     * @return {?}
     */
    VgAPI.prototype.$$getAllProperties = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        /** @type {?} */
        var medias = {};
        /** @type {?} */
        var result;
        for (var id in this.medias) {
            if (this.medias[id]) {
                medias[id] = this.medias[id];
            }
        }
        /** @type {?} */
        var nMedias = Object.keys(medias).length;
        switch (nMedias) {
            case 0:
                // Return default values until vgMedia is initialized
                switch (property) {
                    case 'state':
                        result = VgStates.VG_PAUSED;
                        break;
                    case 'playbackRate':
                    case 'volume':
                        result = 1;
                        break;
                    case 'time':
                        result = { current: 0, total: 0, left: 0 };
                        break;
                }
                break;
            case 1:
                // If there's only one media element then return the plain value
                /** @type {?} */
                var firstMediaId = Object.keys(medias)[0];
                result = medias[firstMediaId][property];
                break;
            default:
                // TODO: return 'master' value
                /** @type {?} */
                var master = this.getMasterMedia();
                result = medias[master.id][property];
        }
        return result;
    };
    /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    VgAPI.prototype.$$setAllProperties = /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    function (property, value) {
        for (var id in this.medias) {
            if (this.medias[id]) {
                this.medias[id][property] = value;
            }
        }
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    VgAPI.prototype.registerElement = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        this.videogularElement = elem;
    };
    /**
     * @param {?} media
     * @return {?}
     */
    VgAPI.prototype.registerMedia = /**
     * @param {?} media
     * @return {?}
     */
    function (media) {
        this.medias[media.id] = media;
    };
    /**
     * @param {?} media
     * @return {?}
     */
    VgAPI.prototype.unregisterMedia = /**
     * @param {?} media
     * @return {?}
     */
    function (media) {
        delete this.medias[media.id];
    };
    VgAPI.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VgAPI.ctorParameters = function () { return []; };
    return VgAPI;
}());
export { VgAPI };
if (false) {
    /** @type {?} */
    VgAPI.prototype.medias;
    /** @type {?} */
    VgAPI.prototype.videogularElement;
    /** @type {?} */
    VgAPI.prototype.playerReadyEvent;
    /** @type {?} */
    VgAPI.prototype.isPlayerReady;
    /** @type {?} */
    VgAPI.prototype.fsAPI;
}
//# sourceMappingURL=data:application/json;base64,