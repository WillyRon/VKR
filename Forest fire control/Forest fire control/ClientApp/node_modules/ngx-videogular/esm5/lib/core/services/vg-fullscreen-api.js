/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/services/vg-fullscreen-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { VgUtils } from './vg-utils';
import { fromEvent } from 'rxjs';
var VgFullscreenAPI = /** @class */ (function () {
    function VgFullscreenAPI() {
        this.nativeFullscreen = true;
        this.isFullscreen = false;
        this.onChangeFullscreen = new EventEmitter();
    }
    /**
     * @param {?} elem
     * @param {?} medias
     * @return {?}
     */
    VgFullscreenAPI.prototype.init = /**
     * @param {?} elem
     * @param {?} medias
     * @return {?}
     */
    function (elem, medias) {
        var _this = this;
        this.videogularElement = elem;
        this.medias = medias;
        /** @type {?} */
        var APIs = {
            w3: {
                enabled: 'fullscreenEnabled',
                element: 'fullscreenElement',
                request: 'requestFullscreen',
                exit: 'exitFullscreen',
                onchange: 'fullscreenchange',
                onerror: 'fullscreenerror'
            },
            newWebkit: {
                enabled: 'webkitFullscreenEnabled',
                element: 'webkitFullscreenElement',
                request: 'webkitRequestFullscreen',
                exit: 'webkitExitFullscreen',
                onchange: 'webkitfullscreenchange',
                onerror: 'webkitfullscreenerror'
            },
            oldWebkit: {
                enabled: 'webkitIsFullScreen',
                element: 'webkitCurrentFullScreenElement',
                request: 'webkitRequestFullScreen',
                exit: 'webkitCancelFullScreen',
                onchange: 'webkitfullscreenchange',
                onerror: 'webkitfullscreenerror'
            },
            moz: {
                enabled: 'mozFullScreen',
                element: 'mozFullScreenElement',
                request: 'mozRequestFullScreen',
                exit: 'mozCancelFullScreen',
                onchange: 'mozfullscreenchange',
                onerror: 'mozfullscreenerror'
            },
            ios: {
                enabled: 'webkitFullscreenEnabled',
                element: 'webkitFullscreenElement',
                request: 'webkitEnterFullscreen',
                exit: 'webkitExitFullscreen',
                onchange: 'webkitendfullscreen',
                // Hack for iOS: webkitfullscreenchange it's not firing
                onerror: 'webkitfullscreenerror'
            },
            ms: {
                enabled: 'msFullscreenEnabled',
                element: 'msFullscreenElement',
                request: 'msRequestFullscreen',
                exit: 'msExitFullscreen',
                onchange: 'MSFullscreenChange',
                onerror: 'MSFullscreenError'
            }
        };
        for (var browser in APIs) {
            if (APIs[browser].enabled in document) {
                this.polyfill = APIs[browser];
                break;
            }
        }
        if (VgUtils.isiOSDevice()) {
            this.polyfill = APIs.ios;
        }
        this.isAvailable = (this.polyfill != null);
        if (this.polyfill == null) {
            return;
        }
        /** @type {?} */
        var fsElemDispatcher;
        switch (this.polyfill.onchange) {
            // Mozilla dispatches the fullscreen change event from document, not the element
            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=724816#c3
            case 'mozfullscreenchange':
                fsElemDispatcher = document;
                break;
            // iOS dispatches the fullscreen change event from video element
            case 'webkitendfullscreen':
                fsElemDispatcher = this.medias.toArray()[0].elem;
                break;
            // HTML5 implementation dispatches the fullscreen change event from the element
            default:
                fsElemDispatcher = elem;
        }
        this.fsChangeSubscription = fromEvent(fsElemDispatcher, this.polyfill.onchange).subscribe((/**
         * @return {?}
         */
        function () {
            _this.onFullscreenChange();
        }));
    };
    /**
     * @return {?}
     */
    VgFullscreenAPI.prototype.onFullscreenChange = /**
     * @return {?}
     */
    function () {
        this.isFullscreen = !!document[this.polyfill.element];
        this.onChangeFullscreen.emit(this.isFullscreen);
    };
    /**
     * @param {?=} element
     * @return {?}
     */
    VgFullscreenAPI.prototype.toggleFullscreen = /**
     * @param {?=} element
     * @return {?}
     */
    function (element) {
        if (element === void 0) { element = null; }
        if (this.isFullscreen) {
            this.exit();
        }
        else {
            this.request(element);
        }
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    VgFullscreenAPI.prototype.request = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (!elem) {
            elem = this.videogularElement;
        }
        this.isFullscreen = true;
        this.onChangeFullscreen.emit(true);
        // Perform native full screen support
        if (this.isAvailable && this.nativeFullscreen) {
            // Fullscreen for mobile devices
            if (VgUtils.isMobileDevice()) {
                // We should make fullscreen the video object if it doesn't have native fullscreen support
                // Fallback! We can't set vg-player on fullscreen, only video/audio objects
                if ((!this.polyfill.enabled && elem === this.videogularElement) || VgUtils.isiOSDevice()) {
                    elem = this.medias.toArray()[0].elem;
                }
                this.enterElementInFullScreen(elem);
            }
            else {
                this.enterElementInFullScreen(this.videogularElement);
            }
        }
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    VgFullscreenAPI.prototype.enterElementInFullScreen = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        elem[this.polyfill.request]();
    };
    /**
     * @return {?}
     */
    VgFullscreenAPI.prototype.exit = /**
     * @return {?}
     */
    function () {
        this.isFullscreen = false;
        this.onChangeFullscreen.emit(false);
        // Exit from native fullscreen
        if (this.isAvailable && this.nativeFullscreen) {
            document[this.polyfill.exit]();
        }
    };
    VgFullscreenAPI.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VgFullscreenAPI.ctorParameters = function () { return []; };
    return VgFullscreenAPI;
}());
export { VgFullscreenAPI };
if (false) {
    /** @type {?} */
    VgFullscreenAPI.prototype.polyfill;
    /** @type {?} */
    VgFullscreenAPI.prototype.onchange;
    /** @type {?} */
    VgFullscreenAPI.prototype.onerror;
    /** @type {?} */
    VgFullscreenAPI.prototype.nativeFullscreen;
    /** @type {?} */
    VgFullscreenAPI.prototype.isFullscreen;
    /** @type {?} */
    VgFullscreenAPI.prototype.isAvailable;
    /** @type {?} */
    VgFullscreenAPI.prototype.videogularElement;
    /** @type {?} */
    VgFullscreenAPI.prototype.medias;
    /** @type {?} */
    VgFullscreenAPI.prototype.fsChangeSubscription;
    /** @type {?} */
    VgFullscreenAPI.prototype.onChangeFullscreen;
}
//# sourceMappingURL=data:application/json;base64,