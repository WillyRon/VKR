/**
 * @fileoverview added by tsickle
 * Generated from: lib/core/vg-core.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { VgControlsHidden } from './services/vg-controls-hidden';
import { VgFullscreenAPI } from './services/vg-fullscreen-api';
import { VgUtils } from './services/vg-utils';
import { VgAPI } from './services/vg-api';
import { VgMedia } from './vg-media/vg-media';
import { VgCuePoints } from './vg-cue-points/vg-cue-points';
import { VgPlayer } from './vg-player/vg-player';
import { VgStates } from './states/vg-states';
import { VgEvents } from './events/vg-events';
export {} from './vg-media/i-media-element';
export {} from './vg-media/i-playable';
export { VgMediaElement } from './vg-media/vg-media-element';
export { VgAPI } from './services/vg-api';
export { VgFullscreenAPI } from './services/vg-fullscreen-api';
export { VgUtils } from './services/vg-utils';
export { VgControlsHidden } from './services/vg-controls-hidden';
export { VgEvents } from './events/vg-events';
export { VgStates } from './states/vg-states';
/**
 * @record
 */
export function BitrateOption() { }
if (false) {
    /** @type {?} */
    BitrateOption.prototype.qualityIndex;
    /** @type {?} */
    BitrateOption.prototype.width;
    /** @type {?} */
    BitrateOption.prototype.height;
    /** @type {?} */
    BitrateOption.prototype.bitrate;
    /** @type {?} */
    BitrateOption.prototype.mediaType;
    /** @type {?|undefined} */
    BitrateOption.prototype.label;
}
export class VgCoreModule {
}
VgCoreModule.decorators = [
    { type: NgModule, args: [{
                declarations: [VgMedia, VgCuePoints, VgPlayer],
                exports: [VgMedia, VgCuePoints, VgPlayer],
                providers: [VgAPI, VgFullscreenAPI, VgUtils, VgControlsHidden, VgStates, VgEvents]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctY29yZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmlkZW9ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3ZnLWNvcmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRzlDLGVBQWMsNEJBQTRCLENBQUM7QUFDM0MsZUFBYyx1QkFBdUIsQ0FBQztBQUN0QywrQkFBYyw2QkFBNkIsQ0FBQztBQUM1QyxzQkFBYyxtQkFBbUIsQ0FBQztBQUNsQyxnQ0FBYyw4QkFBOEIsQ0FBQztBQUM3Qyx3QkFBYyxxQkFBcUIsQ0FBQztBQUNwQyxpQ0FBYywrQkFBK0IsQ0FBQztBQUM5Qyx5QkFBYyxvQkFBb0IsQ0FBQztBQUNuQyx5QkFBYyxvQkFBb0IsQ0FBQzs7OztBQUluQyxtQ0FPQzs7O0lBTkMscUNBQXFCOztJQUNyQiw4QkFBYzs7SUFDZCwrQkFBZTs7SUFDZixnQ0FBZ0I7O0lBQ2hCLGtDQUFrQjs7SUFDbEIsOEJBQWU7O0FBVWpCLE1BQU0sT0FBTyxZQUFZOzs7WUFMeEIsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDO2dCQUM5QyxPQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQztnQkFDekMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQzthQUNuRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZnTWVkaWFFbGVtZW50IH0gZnJvbSAnLi92Zy1tZWRpYS92Zy1tZWRpYS1lbGVtZW50JztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWZ0NvbnRyb2xzSGlkZGVuIH0gZnJvbSAnLi9zZXJ2aWNlcy92Zy1jb250cm9scy1oaWRkZW4nO1xuaW1wb3J0IHsgVmdGdWxsc2NyZWVuQVBJIH0gZnJvbSAnLi9zZXJ2aWNlcy92Zy1mdWxsc2NyZWVuLWFwaSc7XG5pbXBvcnQgeyBWZ1V0aWxzIH0gZnJvbSAnLi9zZXJ2aWNlcy92Zy11dGlscyc7XG5pbXBvcnQgeyBWZ0FQSSB9IGZyb20gJy4vc2VydmljZXMvdmctYXBpJztcbmltcG9ydCB7IFZnTWVkaWEgfSBmcm9tICcuL3ZnLW1lZGlhL3ZnLW1lZGlhJztcbmltcG9ydCB7IFZnQ3VlUG9pbnRzIH0gZnJvbSAnLi92Zy1jdWUtcG9pbnRzL3ZnLWN1ZS1wb2ludHMnO1xuaW1wb3J0IHsgVmdQbGF5ZXIgfSBmcm9tICcuL3ZnLXBsYXllci92Zy1wbGF5ZXInO1xuaW1wb3J0IHsgVmdTdGF0ZXMgfSBmcm9tICcuL3N0YXRlcy92Zy1zdGF0ZXMnO1xuaW1wb3J0IHsgVmdFdmVudHMgfSBmcm9tICcuL2V2ZW50cy92Zy1ldmVudHMnO1xuXG5cbmV4cG9ydCAqIGZyb20gJy4vdmctbWVkaWEvaS1tZWRpYS1lbGVtZW50JztcbmV4cG9ydCAqIGZyb20gJy4vdmctbWVkaWEvaS1wbGF5YWJsZSc7XG5leHBvcnQgKiBmcm9tICcuL3ZnLW1lZGlhL3ZnLW1lZGlhLWVsZW1lbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9zZXJ2aWNlcy92Zy1hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9zZXJ2aWNlcy92Zy1mdWxsc2NyZWVuLWFwaSc7XG5leHBvcnQgKiBmcm9tICcuL3NlcnZpY2VzL3ZnLXV0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZXMvdmctY29udHJvbHMtaGlkZGVuJztcbmV4cG9ydCAqIGZyb20gJy4vZXZlbnRzL3ZnLWV2ZW50cyc7XG5leHBvcnQgKiBmcm9tICcuL3N0YXRlcy92Zy1zdGF0ZXMnO1xuXG5cblxuZXhwb3J0IGludGVyZmFjZSBCaXRyYXRlT3B0aW9uIHtcbiAgcXVhbGl0eUluZGV4OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICBiaXRyYXRlOiBudW1iZXI7XG4gIG1lZGlhVHlwZTogc3RyaW5nO1xuICBsYWJlbD86IHN0cmluZztcbn1cblxuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1ZnTWVkaWEsIFZnQ3VlUG9pbnRzLCBWZ1BsYXllcl0sXG4gIGV4cG9ydHM6IFtWZ01lZGlhLCBWZ0N1ZVBvaW50cywgVmdQbGF5ZXJdLFxuICBwcm92aWRlcnM6IFtWZ0FQSSwgVmdGdWxsc2NyZWVuQVBJLCBWZ1V0aWxzLCBWZ0NvbnRyb2xzSGlkZGVuLCBWZ1N0YXRlcywgVmdFdmVudHNdXG59KVxuZXhwb3J0IGNsYXNzIFZnQ29yZU1vZHVsZSB7IH1cbiJdfQ==