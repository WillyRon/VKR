/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/vg-track-selector/vg-track-selector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
/**
 * @record
 */
export function Option() { }
if (false) {
    /** @type {?} */
    Option.prototype.id;
    /** @type {?} */
    Option.prototype.label;
    /** @type {?} */
    Option.prototype.selected;
}
// tslint:disable:component-class-suffix
export class VgTrackSelector {
    /**
     * @param {?} ref
     * @param {?} API
     */
    constructor(ref, API) {
        this.API = API;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe((/**
             * @return {?}
             */
            () => this.onPlayerReady())));
        }
    }
    /**
     * @return {?}
     */
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
        /** @type {?} */
        const subs = Array.from(((/** @type {?} */ (this.API.getMasterMedia().elem))).children)
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.tagName === 'TRACK'))
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.kind === 'subtitles'))
            .map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => ({
            label: item.label,
            selected: item.default === true,
            id: item.srclang
        })));
        this.tracks = [
            ...subs,
            {
                id: null,
                label: 'Off',
                selected: subs.every((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item.selected === false))
            }
        ];
        /** @type {?} */
        const track = this.tracks.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.selected === true))[0];
        this.trackSelected = track.id;
        this.ariaValue = track.label;
    }
    /**
     * @param {?} trackId
     * @return {?}
     */
    selectTrack(trackId) {
        this.trackSelected = (trackId === 'null') ? null : trackId;
        this.ariaValue = 'No track selected';
        Array.from(((/** @type {?} */ (this.API.getMasterMedia().elem))).textTracks)
            .forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (item.language === trackId) {
                this.ariaValue = item.label;
                item.mode = 'showing';
            }
            else {
                item.mode = 'hidden';
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => s.unsubscribe()));
    }
}
VgTrackSelector.decorators = [
    { type: Component, args: [{
                selector: 'vg-track-selector',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="container">
            <div class="track-selected"
                 [class.vg-icon-closed_caption]="!trackSelected">
                {{ trackSelected || '' }}
            </div>

            <select class="trackSelector"
                    (change)="selectTrack($event.target.value)"
                    tabindex="0"
                    aria-label="track selector"
                    [attr.aria-valuetext]="ariaValue">
                <option
                    *ngFor="let track of tracks"
                    [value]="track.id"
                    [selected]="track.selected === true">
                    {{ track.label }}
                </option>
            </select>
        </div>
    `,
                styles: [`
        vg-track-selector {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: flex;
            justify-content: center;
            width: 50px;
            height: 50px;
            cursor: pointer;
            color: white;
            line-height: 50px;
        }
        vg-track-selector .container {
            position: relative;
            display: flex;
            flex-grow: 1;
            align-items: center;

            padding: 0;
            margin: 5px;
        }
        vg-track-selector select.trackSelector {
            width: 50px;
            padding: 5px 8px;
            border: none;
            background: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            color: transparent;
            font-size: 16px;
        }
        vg-track-selector select.trackSelector::-ms-expand {
            display: none;
        }
        vg-track-selector select.trackSelector option {
            color: #000;
        }
        vg-track-selector .track-selected {
            position: absolute;
            width: 100%;
            height: 50px;
            top: -6px;
            text-align: center;
            text-transform: uppercase;
            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
            padding-top: 2px;
            pointer-events: none;
        }
        vg-track-selector .vg-icon-closed_caption:before {
            width: 100%;
        }
    `]
            }] }
];
/** @nocollapse */
VgTrackSelector.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
VgTrackSelector.propDecorators = {
    vgFor: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VgTrackSelector.prototype.vgFor;
    /** @type {?} */
    VgTrackSelector.prototype.elem;
    /** @type {?} */
    VgTrackSelector.prototype.target;
    /** @type {?} */
    VgTrackSelector.prototype.tracks;
    /** @type {?} */
    VgTrackSelector.prototype.trackSelected;
    /** @type {?} */
    VgTrackSelector.prototype.subscriptions;
    /** @type {?} */
    VgTrackSelector.prototype.ariaValue;
    /** @type {?} */
    VgTrackSelector.prototype.API;
}
//# sourceMappingURL=data:application/json;base64,